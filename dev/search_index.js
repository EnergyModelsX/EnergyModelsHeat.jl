var documenterSearchIndex = {"docs":
[{"location":"resources/resourceheat/#resources-ResourceHeat","page":"ResourceHeat","title":"ResourceHeat","text":"","category":"section"},{"location":"resources/resourceheat/","page":"ResourceHeat","title":"ResourceHeat","text":"Thermal energy has the special feature that the quality or usefulness of the energy depends not just on the amount but also on the temperature level. ResourceHeat, which is a 'Resource' for converting or transporting thermal energy, is introduced to be able to model thermal energy components and systems with specific temperature levels in EnergyModelsX. ResourceHeat is applied in technology models for generation, conversion, storage and transport of heat, introduced in the EnergyModelsHeat package.","category":"page"},{"location":"resources/resourceheat/#resources-ResourceHeat-fields","page":"ResourceHeat","title":"Introduced type and its fields","text":"","category":"section"},{"location":"resources/resourceheat/","page":"ResourceHeat","title":"ResourceHeat","text":"ResourceHeat extends on the abstract type Resource from EnergyModelsBase, with the two additional fields for supply and return temperature:","category":"page"},{"location":"resources/resourceheat/","page":"ResourceHeat","title":"ResourceHeat","text":"id :\n  The field id is only used for providing a name to the resource.\nt_supply::TimeProfile :\n  The supply temperature in °C.   This is the temperature for water flowing from a source to the sink in a thermal network.   In district heating, supply temperature is typically in the range 80-120 °C for conventional high-temperature district heating networks, and 40-70 °C for modern, low-temperature networks.\nt_return::TimeProfile :\n  The return temperature in °C, i.e., the temperature for water flowing from the sink back to the source in a thermal network.   In district heating, the return temperature is typically 30-50 °C below the supply temperature.   The use of the field return temperature is optional: if only the supply temperature is defined, the return temperature is set to zero.","category":"page"},{"location":"resources/resourceheat/","page":"ResourceHeat","title":"ResourceHeat","text":"tip: Constant temperatures\nIf the constant for supply and return is not changing, it is also possible to provide a number as input. This is achieved through a constructor.","category":"page"},{"location":"resources/resourceheat/","page":"ResourceHeat","title":"ResourceHeat","text":"","category":"page"},{"location":"howto/contribute/#how_to-con","page":"Contribute to EnergyModelsHeat","title":"Contribute to EnergyModelsHeat","text":"","category":"section"},{"location":"howto/contribute/","page":"Contribute to EnergyModelsHeat","title":"Contribute to EnergyModelsHeat","text":"Contributing to EnergyModelsHeat can be achieved in several different ways.","category":"page"},{"location":"howto/contribute/#how_to-con-bug_rep","page":"Contribute to EnergyModelsHeat","title":"File a bug report","text":"","category":"section"},{"location":"howto/contribute/","page":"Contribute to EnergyModelsHeat","title":"Contribute to EnergyModelsHeat","text":"Another approach to contributing to EnergyModelsHeat is through filing a bug report as an issue when unexpected behaviour is occuring.","category":"page"},{"location":"howto/contribute/","page":"Contribute to EnergyModelsHeat","title":"Contribute to EnergyModelsHeat","text":"When filing a bug report, please follow the following guidelines:","category":"page"},{"location":"howto/contribute/","page":"Contribute to EnergyModelsHeat","title":"Contribute to EnergyModelsHeat","text":"Be certain that the bug is a bug and originating in EnergyModelsHeat:\nIf the problem is within the results of the optimization problem, please check first that the nodes are correctly linked with each other. Frequently, missing links (or wrongly defined links) restrict the transport of energy/mass. If you are certain that all links are set correctly, it is most likely a bug in EnergyModelsHeat and should be reported.\nIf the problem occurs in model construction, it is most likely a bug in either EnergyModelsBase or EnergyModelsHeat and should be reported in the respective package. The error message of Julia should provide you with the failing function and whether the failing function is located in EnergyModelsBase or EnergyModelsHeat. It can occur, that the last shown failing function is within JuMP or MathOptInterface. In this case, it is best to trace the error to the last called EnergyModelsBase or EnergyModelsHeat function.\nIf the problem is only appearing for specific solvers, it is most likely not a bug in EnergyModelsHeat, but instead a problem of the solver wrapper for MathOptInterface. In this case, please contact the developers of the corresponding solver wrapper.\nLabel the issue as bug, and\nProvide a minimum working example of a case in which the bug occurs.","category":"page"},{"location":"howto/contribute/#how_to-con-feat_req","page":"Contribute to EnergyModelsHeat","title":"Feature requests","text":"","category":"section"},{"location":"howto/contribute/","page":"Contribute to EnergyModelsHeat","title":"Contribute to EnergyModelsHeat","text":"EnergyModelsHeat includes several new nodal descriptions for heat technologies. However, there can be a demand for additional requirements for the existing nodes or for new descriptions which fall below the umbrella of heat technologies. In this case, you can contribute through a feature request.","category":"page"},{"location":"howto/contribute/","page":"Contribute to EnergyModelsHeat","title":"Contribute to EnergyModelsHeat","text":"Feature requests for EnergyModelsHeat should follow the guidelines developed for EnergyModelsBase.","category":"page"},{"location":"howto/contribute/","page":"Contribute to EnergyModelsHeat","title":"Contribute to EnergyModelsHeat","text":"note: Note\nEnergyModelsHeat is slightly different than EnergyModelsBase.Contrary to the other package, we consider that it is beneficial to have all potential features of heat technologies within EnergyModelsHeat. Hence, if you have a requirement for a new nodal description, do not hesitate to create an issue.","category":"page"},{"location":"howto/contribute/","page":"Contribute to EnergyModelsHeat","title":"Contribute to EnergyModelsHeat","text":"","category":"page"},{"location":"library/internals/types-EMH/#lib-int-types","page":"Types","title":"Types","text":"","category":"section"},{"location":"library/internals/types-EMH/#lib-int-types-idx","page":"Types","title":"Index","text":"","category":"section"},{"location":"library/internals/types-EMH/","page":"Types","title":"Types","text":"Pages = [\"types-EMH.md\"]","category":"page"},{"location":"library/internals/types-EMH/#lib-int-types-node","page":"Types","title":"Nodal supertypes","text":"","category":"section"},{"location":"library/internals/types-EMH/#EnergyModelsHeat.AbstractHeatExchanger","page":"Types","title":"EnergyModelsHeat.AbstractHeatExchanger","text":"AbstractHeatExchanger <: EnergyModelsBase.NetworkNode\n\nA supertype for heat exchangers.\n\n\n\n\n\n","category":"type"},{"location":"library/internals/types-EMH/#EnergyModelsHeat.AbstractTES","page":"Types","title":"EnergyModelsHeat.AbstractTES","text":"AbstractTES <: Storage{T}\n\nAbstract supertype for all thermal energy storage nodes.\n\n\n\n\n\n","category":"type"},{"location":"library/internals/types-EMH/#lib-int-types-para","page":"Types","title":"Parameter supertypes","text":"","category":"section"},{"location":"library/internals/types-EMH/#EnergyModelsHeat.HeatExchangerAssumptions","page":"Types","title":"EnergyModelsHeat.HeatExchangerAssumptions","text":"HeatExchangerAssumptions\n\nA supertype for assumptions for a heat exchanger, such that different efficiencies can be calculated based on the underlying assumptions.\n\n\n\n\n\n","category":"type"},{"location":"library/internals/types-EMH/#lib-int-types-aux","page":"Types","title":"Auxiliary types","text":"","category":"section"},{"location":"library/internals/types-EMH/#EnergyModelsHeat.DifferentMassFlows","page":"Types","title":"EnergyModelsHeat.DifferentMassFlows","text":"DifferentMassFlows <: HeatExchangerAssumptions\n\nAssume mass flows can be adjusted to optimise heat transfer. Assume the same medium in both circuits.\n\n\n\n\n\n","category":"type"},{"location":"library/internals/types-EMH/#EnergyModelsHeat.EqualMassFlows","page":"Types","title":"EnergyModelsHeat.EqualMassFlows","text":"EqualMassFlows <: HeatExchangerAssumptions\n\nAssume mass flows are equal in both circuits and using the same medium.\n\n\n\n\n\n","category":"type"},{"location":"library/internals/types-EMH/","page":"Types","title":"Types","text":"","category":"page"},{"location":"manual/simple-example/#man-exampl","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"For the content of the example, see the examples directory in the project repository.","category":"page"},{"location":"manual/simple-example/#The-package-is-installed-with-]-add","page":"Examples","title":"The package is installed with ] add","text":"","category":"section"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"From the Julia REPL, run","category":"page"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"# Starts the Julia REPL\njulia> using EnergyModelsHeat\n# Get the path of the examples directory\njulia> exdir = joinpath(pkgdir(EnergyModelsHeat), \"examples\")\n# Include the code into the Julia REPL to run the district heating example\njulia> include(joinpath(exdir, \"district_heating.jl\"))","category":"page"},{"location":"manual/simple-example/#The-code-was-downloaded-with-git-clone","page":"Examples","title":"The code was downloaded with git clone","text":"","category":"section"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"The examples can then be run from the terminal with","category":"page"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"/path/to/EnergyModelsHeat.jl/examples $ julia district_heating.jl","category":"page"},{"location":"manual/simple-example/","page":"Examples","title":"Examples","text":"","category":"page"},{"location":"library/internals/methods-EMH/#lib-int-met_emh","page":"Methods - EnergyModelsHeat","title":"Methods - EnergyModelsHeat","text":"","category":"section"},{"location":"library/internals/methods-EMH/#lib-int-met_emh-idx","page":"Methods - EnergyModelsHeat","title":"Index","text":"","category":"section"},{"location":"library/internals/methods-EMH/","page":"Methods - EnergyModelsHeat","title":"Methods - EnergyModelsHeat","text":"Pages = [\"methods-EMH.md\"]","category":"page"},{"location":"library/internals/methods-EMH/#lib-int-met_emb-ext","page":"Methods - EnergyModelsHeat","title":"Extension methods","text":"","category":"section"},{"location":"library/internals/methods-EMH/#lib-int-met_emb-con","page":"Methods - EnergyModelsHeat","title":"Constraint methods","text":"","category":"section"},{"location":"library/internals/methods-EMH/#lib-int-met-util","page":"Methods - EnergyModelsHeat","title":"Utility methods","text":"","category":"section"},{"location":"library/internals/methods-EMH/#EnergyModelsHeat.dh_fraction","page":"Methods - EnergyModelsHeat","title":"EnergyModelsHeat.dh_fraction","text":"dh_fraction\n\nReturn fraction of surpus heat that can be used for district heating. Dispatch on HeatExchangerAssumptions when calculating d_fraction\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMH/#EnergyModelsHeat.dh_upgrade","page":"Methods - EnergyModelsHeat","title":"EnergyModelsHeat.dh_upgrade","text":"dh_upgrade\n\nReturn needed power to upgrade to outflow of useable (for district heating) heat\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMH/#EnergyModelsHeat.fraction_equal_mass","page":"Methods - EnergyModelsHeat","title":"EnergyModelsHeat.fraction_equal_mass","text":"fraction_equal_mass(pd::PinchData)\n\nCalculate fraction of heat available for district heating at pinch point T_DH_cold\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMH/#EnergyModelsHeat.is_heat","page":"Methods - EnergyModelsHeat","title":"EnergyModelsHeat.is_heat","text":"is_heat(r)\n\nReturns true for heat resources, false otherwise.  Extend this by dispatching on the type for any alternative heat resource type implemented.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMH/#EnergyModelsHeat.t_return","page":"Methods - EnergyModelsHeat","title":"EnergyModelsHeat.t_return","text":"t_return(rh::ResourceHeat)\nt_return(rh::ResourceHeat, t)\n\nReturn the return temperature defined for a ResourceHeat\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMH/#EnergyModelsHeat.upgrade_equal_mass","page":"Methods - EnergyModelsHeat","title":"EnergyModelsHeat.upgrade_equal_mass","text":"Assuming equal mass flows\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMH/#EnergyModelsHeat.upgradeable_fraction","page":"Methods - EnergyModelsHeat","title":"EnergyModelsHeat.upgradeable_fraction","text":"upgradeable_fraction\n\nReturn fraction of surplus heat that can be upgraded\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMH/","page":"Methods - EnergyModelsHeat","title":"Methods - EnergyModelsHeat","text":"","category":"page"},{"location":"nodes/heatpump/#nodes-HeatPump","page":"HeatPump","title":"HeatPump","text":"","category":"section"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"The HeatPump node models a technology that converts low-temperature heat into higher-temperature heat using an exergy driving force. The most common form of exergy driving force is electricity, but the same node could be used to model heat-driven heat pumps, where the exergy input comes in the form of high temperature heat. For simplicity, the term \"electricity\" is used to represent the exergy driving force in the following. The HeatPump node supports dynamic coefficients of performance (COP) based on the source and sink temperatures and Carnot efficiency. The Carnot efficiency describes the ratio of the theoretical maximum achievable COP (Carnot COP), which is based solely on the temperature lift between the source and sink temperature, and the actual COP. This allows for a straightforward calculation of the relation between heat and electricity input. While the Carnot efficiency in practice depends on several factors beyond the source and sink temperatures and is typically not constant across all operating conditions, it is provided here as an exogenous parameter by the user in the form of a TimeProfile. The user can analyze the sink and source temperature profiles and can predetermine a theoretical Carnot efficiency profile based on that. A lower capacity bound can be defined, restricting how much the heat pump can be regulated down.","category":"page"},{"location":"nodes/heatpump/#nodes-HeatPump-fields","page":"HeatPump","title":"Introduced type and its fields","text":"","category":"section"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"The HeatPump is a subtype of the NetworkNode. It uses the same functions as NetworkNode in EnergyModelsBase.","category":"page"},{"location":"nodes/heatpump/#nodes-HeatPump-fields-stand","page":"HeatPump","title":"Standard fields","text":"","category":"section"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"id:\nThe field id is only used for providing a name to the node. This is similar to the approach utilized in EnergyModelsBase.\ncap::TimeProfile:\nSpecifies the installed heating capacity, that is the heat the heat pump can deliver.\nIf the node should contain investments through the application of EnergyModelsInvestments, it is important to note that you can only use FixedProfile or StrategicProfile for the capacity, but not RepresentativeProfile or OperationalProfile.\nIn addition, all values have to be non-negative.\nopex_var::TimeProfile:\nThe variable operational expenses are based on the capacity utilization through the variable :cap_use. Hence, it is directly related to the specified output ratios. The variable operating expenses can be provided as OperationalProfile as well.\nopex_fixed::TimeProfile:\nThe fixed operating expenses are relative to the installed capacity (through the field cap) and the chosen duration of a strategic period as outlined on Utilize TimeStruct.\nIt is important to note that you can only use FixedProfile or StrategicProfile for the fixed OPEX, but not RepresentativeProfile or OperationalProfile. In addition, all values have to be non-negative.\noutput::Dict{<:Resource, <:Real}:\nThe field output includes the output Resources with their corresponding conversion factors as dictionaries. In the case of a heat pump, output should always include the heat resource used within the energy system. The value of the heat resource is in general 1. It is also possible to include other resources which are produced with a given correlation with the heat.\nAll values have to be non-negative.\ndata::Vector{<:ExtensionData}:\nAn entry for providing additional data to the model. In the current version, it is only relevant for additional investment data when EnergyModelsInvestments is used or for additional emission data through EmissionsProcess. The latter would correspond to uncaptured CO₂ that should be included in the analyses.\nnote: Note\nThe field data is not required as we include a constructor when the value is excluded.","category":"page"},{"location":"nodes/heatpump/#nodes-HeatPump-fields-new","page":"HeatPump","title":"New fields","text":"","category":"section"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"cap_lower_bound::Real:\nThe lower bound for the capacity is the minimum operating point of the HeatPump. It can be included for limiting the flexibility of the heat pump.\nwarning: Lower capacity bound\nThe current implementation requires that the heat pump operates in all operational periods if cap_lower_bound > 0.\nt_source::TimeProfile:\nThe source temperature is the temperature of the source in °C. This temperature represents the temperature at which the heat pump absorbs heat, e.g., the air temperature. The used heat is given by the field input_heat.\nt_sink::TimeProfile:\nThe sink temperature is the temperature at which the heat pump delivers heat in °C. It is directly related to the temperature of the output resource corresponding to heat.\neff_carnot::TimeProfile:\nThe Carnot efficiency is the ratio bnbetween the real and the Carnot COP, and hence, the relation between the maximum theoretical efficiency and the real efficiency of the heat pump. The effective Carnot efficiency depends on the specific heat pump model as well as its operational conditions.\ninfo: Usage dependent efficiencies\nThe capacity use cannot be included as an influencing factor on the Carnot efficiency as it is implemented as an optimization variable. This would then result in a bilinear term of a piecewise linear representation and a continuous variable. However, the user can utilize the known temperature lifts to adjust the Carnot efficiency profile according to the technical specifications of the heat pump.\ninput_heat::Resource:\nThe heat input resource corresponds to the lower temperature heat reservoir from which heat is transfered to a higher temperature. In most approaches, the input_heat is corresponding to the surrounding (e.g., the air), but it can also correspond to a lower temperature water stream.\ndriving_force:Resource:\nThe driving force resource provides the energy for transfering the heat from the lower temperature (given by t_source) to the higher temperature (given by t_sink). The driving force is in general electricity.","category":"page"},{"location":"nodes/heatpump/#nodes-HeatPump-math","page":"HeatPump","title":"Mathematical description","text":"","category":"section"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"In the following mathematical equations, we use the name for variables and functions used in the model. Variables are in general represented as","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"textttvar_exampleindex_1 index_2","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"with square brackets, while functions are represented as","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"func_example(index_1 index_2)","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"with paranthesis.","category":"page"},{"location":"nodes/heatpump/#nodes-HeatPump-math-var","page":"HeatPump","title":"Variables","text":"","category":"section"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"The HeatPump node uses standard NetworkNode variables, as described on the page Optimization variables. The variables include:","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"textttopex_var\ntextttopex_fixed\ntextttcap_use\ntextttcap_inst\ntextttflow_in\ntextttflow_out","category":"page"},{"location":"nodes/heatpump/#nodes-HeatPump-math-con","page":"HeatPump","title":"Constraints","text":"","category":"section"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"The following sections omit the direct inclusion of the vector of heat pump nodes. Instead, it is implicitly assumed that the constraints are valid forall n  N^HeatPump for all HeatPump types if not stated differently. In addition, all constraints are valid forall t in T (that is in all operational periods) or forall t_inv in T^Inv (that is in all strategic periods).","category":"page"},{"location":"nodes/heatpump/#nodes-HeatPump-math-con-stand","page":"HeatPump","title":"Standard constraints","text":"","category":"section"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"Heat pump nodes utilize in general the standard constraints described on Constraint functions for NetworkNodes. These standard constraints are:","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"constraints_capacity_installed:\ntextttcap_instn t = capacity(n t)\ntip: Using investments\nThe function constraints_capacity_installed is also used in EnergyModelsInvestments to incorporate the potential for investment. Nodes with investments are then no longer constrained by the parameter capacity.\nconstraints_flow_out:\ntextttflow_outn t p =\noutputs(n p) times textttcap_usen t\nqquad forall p in outputs(n) setminus textCO_2\nconstraints_opex_fixed:\ntextttopex_fixedn t_inv = opex_fixed(n t_inv) times textttcap_instn first(t_inv)\ntip: Why do we use `first()`\nThe variable textttcap_inst is declared over all operational periods (see the section on Capacity variables for further explanations). Hence, we use the function first(t_inv) to retrieve the installed capacity in the first operational period of a given strategic period t_inv in the function constraints_opex_fixed.\nconstraints_opex_var:\ntextttopex_varn t_inv = sum_t in t_inv opex_var(n t) times textttcap_usen t times scale_op_sp(t_inv t)\ntip: The function `scale_op_sp`\nThe function scale_op_sp(t_inv t) calculates the scaling factor between operational and strategic periods. It also takes into account potential operational scenarios and their probability as well as representative periods.\nconstraints_ext_data:\nThis function is only called for specified data of the storage node, see above.","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"The constraints_capacity function is extended by implementing the lower capacity bound to limit the lowest possible capacity use:","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"textttcap_usen t geq cap_lower_bound(n) times textttcap_instn t","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"The original constraints limiting the capacity to the installed capacity:","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"textttcap_usen t leq textttcap_instn t","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"and calling the subfunction constraints_capacity_installed to provide bounds for the variable textttcap_instn t are still called within the function.","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"The input flow constraint for a HeatPump node is calculated differently to a NetworkNode as the relationship between heat_in_resource and driving_force_resource is reflecting the COP of the heat pump. Since the input resources are specified via the fields heat_in_resource and driving_force_resource, and the conversion factors are calculated seperately, the field inputs is not required. The determination of conversion factors is achieved by extending the constraints_flow_in function, separating the calculation for the input flow of heat source and driving force. All temperatures are specified in degree Celsius, so the values must be converted into Kelvin by adding 273.15 °C.","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"Given a heat resource p_heat = heat_in_resource(n), we can calculate the heat input as:","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"beginaligned\ntextttflow_inn t p_heat =\n  textttcap_usen t times   \n  left( 1 - fract_sink(n t) - t_source(n t)eff_carnot(nt) times (t_sink(n t) + 27315) right)\nendaligned","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"The input for the p_df = driving_force_resource(n)","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"beginaligned\ntextttflow_inn t p_df =\n  textttcap_usen t times  \n  fract_sink(n t) - t_source(n t)eff_carnot(nt) times (t_sink(n t) + 27315)\nendaligned","category":"page"},{"location":"nodes/heatpump/#nodes-HeatPump-math-con-add","page":"HeatPump","title":"Additional constraints","text":"","category":"section"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"HeatPump nodes do not add additional constraint functions or constraints in the create_node function.","category":"page"},{"location":"nodes/heatpump/","page":"HeatPump","title":"HeatPump","text":"","category":"page"},{"location":"manual/quick-start/#man-quick_start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"Install the most recent version of Julia\nInstall the package EnergyModelsBase and the time package TimeStruct, by running:\n] add TimeStruct\n] add EnergyModelsBase\nThese packages are required as we do not only use them internally, but also for building a model.\nInstall the package EnergyModelsHeat\n] add EnergyModelsHeat","category":"page"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"You also have to install a solver for solving the optimization problem. In either case, you have to","category":"page"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"Install JuMP by running:\n] add JuMP\nInstall your chosen solver, e.g., HiGHS and Gurobi, by running:\n] add HiGHS\n] add Gurobi","category":"page"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"You may, depending on your operating system, also have to locally install the solver in addition as explained in the corresponding README file.","category":"page"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"tip: JuMP and solver\nWhile JuMP is automatically installed when you add EnergyModelsBase, it is still necessary to load it to optimize a model or extract the results. It is hence necessary to load it in each model run explicitly.EnergyModelsX models are in general agnostic towards which solver is used. They are hence not automatically included. Therefore, they require you to explicitly load the corresponding solver.","category":"page"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"","category":"page"},{"location":"library/internals/methods-EMB/#lib-int-met_emb","page":"Methods - EnergyModelsBase","title":"Methods - EnergyModelsBase","text":"","category":"section"},{"location":"library/internals/methods-EMB/#lib-int-met_emb-idx","page":"Methods - EnergyModelsBase","title":"Index","text":"","category":"section"},{"location":"library/internals/methods-EMB/","page":"Methods - EnergyModelsBase","title":"Methods - EnergyModelsBase","text":"Pages = [\"methods-EMB.md\"]","category":"page"},{"location":"library/internals/methods-EMB/#lib-int-met_emb-ext","page":"Methods - EnergyModelsBase","title":"Extension methods","text":"","category":"section"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.create_link","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.create_link","text":"create_link(m, l::DHPipe, 𝒯, 𝒫, modeltype::EnergyModel)\n\nWhen the link is a DHPipe, the constraints for a link include a loss based on the difference in the temperature of the district heating resource and the ground.\n\nIn addition, a DHPipe includes a capacity with the potential for investments.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.variables_link","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.variables_link","text":"variables_link(m, ℒˢᵘᵇ::Vector{<:DHPipe}, 𝒯, modeltype::EnergyModel)\n\nDefine variable dh_loss for heat losses in DH pipes\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#lib-int-met_emb-con","page":"Methods - EnergyModelsBase","title":"Constraint methods","text":"","category":"section"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.constraints_level_iterate","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.constraints_level_iterate","text":"constraints_level_iterate(\n    m,\n    n::AbstractTES,\n    prev_pers::PreviousPeriods,\n    cyclic_pers::CyclicPeriods,\n    per,\n    _::SimpleTimes,\n    modeltype::EnergyModel,\n)\n\nIn the case of a AbstractTES, the lowest level iterator is adjusted as the loss is dependent on the level at the beginning of the operational period.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.constraints_capacity","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.constraints_capacity","text":"constraints_capacity(m, n::HeatPump, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the minimum capacity utilization of a HeatPump.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.constraints_flow_in","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.constraints_flow_in","text":"constraints_flow_in(m, n::HeatPump, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the heat and electricity input of a HeatPump.\n\n\n\n\n\nconstraints_flow_in(m, n::DirectHeatUpgrade, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nCreate the constraints for flow in to DirectHeatUpgrade. The constraint is only for power as the proportion of the inputs     depends on the need for upgrade computed from the temperatures of the input/output ResourceHeat and the ΔT_min, and the     capacity is linked to the power consumption.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.constraints_flow_out","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.constraints_flow_out","text":"EMB.constraints_flow_out(m, n::HeatExchanger{A,T}, 𝒯::TimeStructure, modeltype::EnergyModel)\n\nCreate the constraints for the flow out from a HeatExchanger. The flow of available heat energy is calculated from the temperatures in the heat flows using the function dh_fraction.\n\n\n\n\n\nconstraints_flow_out(m, n::DirectHeatUpgrade{A,T}, 𝒯::TimeStructure, modeltype::EnergyModel) where {A,T}\n\nCreate the constraints for flow out from a DirectHeatUpgrade. The flow of available heat energy is calculated from the temperatures in the heat flows using the function upgradeable_fraction, and the heat needed to upgrade to the  required temperature is calculated by the function dh_upgrade. Note that the node may dump some of the ingoing heat energy, and the power needed for the upgrade is calculated from the resulting energy outflow.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#lib-int-met_emb-check","page":"Methods - EnergyModelsBase","title":"Check methods","text":"","category":"section"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.check_node","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.check_node","text":"check_node(\n    n::DirectHeatUpgrade{A, T},\n    𝒯,\n    modeltype::EnergyModel,\n    check_timeprofiles::Bool,\n) where {A, T}\n\nCheck if a DirectHeatUpgrade node has reasonable values for the return/supply temperatures and error if the upgrade is ≥ 1 (should only happen with data errors).\n\n\n\n\n\nEMB.check_node(n::HeatPump, 𝒯, modeltype::EnergyModel, check_timeprofiles::Bool)\n\nThis method checks that the HeatPump node is valid.\n\nIt reuses the standard checks of a NetworkNode node through calling the function EMB.check_node_default, but adds an additional check on the data.\n\nChecks\n\nThe field cap is required to be non-negative (similar to the NetworkNode check).\nThe value of the field fixed_opex is required to be non-negative and accessible through a StrategicPeriod as outlined in the function check_fixed_opex(n, 𝒯ᴵⁿᵛ, check_timeprofiles).\nThe values of the dictionary input and output are required to be non-negative (similar to the NetworkNode check).\nThe field cap_lower_bound is required to be in the range 0 1 for all time steps t  mathcalT.\nThe field eff_carnot is required to be in the range 0 1 for all time steps t  mathcalT.\nThe field t_sink is required to be greater than or equal to the field t_source for all time steps t  mathcalT.\n\n\n\n\n\nEMB.check_node(n::AbstractTES{T}, 𝒯, modeltype::EnergyModel, check_timeprofiles::Bool) where {T<:StorageBehavior}\n\nThis method checks that nodes of the type AbstractTES are valid.\n\nIt reuses the standard checks of a Storage node through calling the function EMB.check_node_default, but adds an additional check on the data.\n\nChecks\n\nThe TimeProfile of the field capacity in the type in the field charge is required to be non-negative if the chosen composite type has the field capacity.\nThe TimeProfile of the field capacity in the type in the field level is required to be non-negative`.\nThe TimeProfile of the field capacity in the type in the field discharge is required to be non-negative if the chosen composite type has the field capacity.\nThe TimeProfile of the field fixed_opex is required to be non-negative and accessible through a StrategicPeriod as outlined in the function [check_fixed_opex(n, 𝒯ᴵⁿᵛ, check_timeprofiles)] for the chosen composite type .\nThe values of the dictionary input are required to be non-negative.\nThe values of the dictionary output are required to be non-negative.\nThe value of the field heat_loss_factor is required to be in the range 0 1.\n\nWarnings\n\nThe StorageBehavior should not be CyclicStrategic when using RepresentativePeriods.\n\n\n\n\n\nEMB.check_node(n::BoundRateTES{T}, 𝒯, modeltype::EnergyModel, check_timeprofiles::Bool) where {T<:EMB.StorageBehavior}\n\nThis method checks that the BoundRateTES node is valid.\n\nIt reuses the standard checks of a Storage node through calling the function EMB.check_node_default, but adds an additional check on the data.\n\nChecks\n\nThe TimeProfile of the field capacity in the type in the field charge is required to be non-negative if the chosen composite type has the field capacity.\nThe TimeProfile of the field capacity in the type in the field level is required to be non-negative`.\nThe TimeProfile of the field capacity in the type in the field discharge is required to be non-negative if the chosen composite type has the field capacity.\nThe TimeProfile of the field fixed_opex is required to be non-negative and accessible through a StrategicPeriod as outlined in the function [check_fixed_opex(n, 𝒯ᴵⁿᵛ, check_timeprofiles)] for the chosen composite type .\nThe values of the dictionary input are required to be non-negative.\nThe values of the dictionary output are required to be non-negative.\nThe value of the field heat_loss_factor is required to be in the range 0 1.\nThe value of the field level_discharge is required to be non-negative.\nThe value of the field level_charge is required to be non-negative.\n\nWarnings\n\nThe StorageBehavior should not be CyclicStrategic when using RepresentativePeriods.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.check_link","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.check_link","text":"EMB.check_link(l::DHPipe, 𝒯,  modeltype::EnergyModel, check_timeprofiles::Bool)\n\nThis method checks that the DHPipe link is valid.\n\nChecks\n\nThe field cap is required to be non-negative.\nThe field pipe_length is required to be non-negative.\nThe field pipe_loss_factor is required to be non-negative.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#lib-int-met_emb-field","page":"Methods - EnergyModelsBase","title":"Field extraction methods","text":"","category":"section"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.co2_int","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.co2_int","text":"co2_int(::ResourceHeat)\n\nReturns 0.0 for all ResourceHeat.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.capacity","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.capacity","text":"capacity(l::DHPipe)\ncapacity(l::DHPipe, t)\n\nReturns the capacity of a DHPipe l as TimeProfile or in operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.inputs","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.inputs","text":"inputs(n::HeatPump)\ninputs(n::HeatPump, p::Resource)\n\nReturns the input resources of a HeatPump n, specified via the fields heat_in_resource and driving_force_resource.\n\nIf the resource p is specified, it returns a value of 1. This behaviour should in theory not occur.\n\n\n\n\n\nEMB.inputs(l::DHPipe)\n\nReturn the resources transported into a given DHPipe l. This resource is in a standard DHPipe given by the function resource_heat.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.outputs","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.outputs","text":"EMB.outputs(l::DHPipe)\n\nReturn the resources transported out from a given DHPipe l. This resource is in a standard DHPipe given by the function resource_heat.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/#lib-int-met_emb-identi","page":"Methods - EnergyModelsBase","title":"Identification methods","text":"","category":"section"},{"location":"library/internals/methods-EMB/#EnergyModelsBase.has_capacity","page":"Methods - EnergyModelsBase","title":"EnergyModelsBase.has_capacity","text":"has_capacity(l::DHPipe)\n\nThe DHPipe has a capacity, and hence, requires the declaration of capacity variables.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-EMB/","page":"Methods - EnergyModelsBase","title":"Methods - EnergyModelsBase","text":"","category":"page"},{"location":"nodes/thermalenergystorage/#nodes-TES","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage nodes","text":"","category":"section"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"Thermal energy storage nodes work mostly like a RefStorage with the additional option to include thermal energy losses. Heat losses are quantified through a heat loss factor that describes the amount of thermal energy that is lost in relation to the storage level of the respective operational period. The main difference to RefStorage is that these heat losses occur independently of the storage use, i.e., in every operational period unless the storage level is zero. In practice, this approach with a constant relative heat loss factor does not accurately represent heat loss mechanisms based on temperature difference between the inside and outside of the TES. However, it is a reasonable approximation that at least reflects the dependence of the SOC on the absolute losses of the storage. Additionally, thermal energy storage nodes allow for the definition of both charge and discharge rate. ","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"danger: StorageBehavior for ThermalEnergyStorage\nThermal energy storage nodes can only utilize Cyclic storage behaviors. When using RepresentativePeriods, this is furthermore reduced toCyclicRepresentative. The reason for this limitation is that we have not yet implemented heat losses over a representative period.","category":"page"},{"location":"nodes/thermalenergystorage/#nodes-TES-fields","page":"ThermalEnergyStorage","title":"Introduced type and its fields","text":"","category":"section"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"ThermalEnergyStorage is similar to a RefStorage, with the addition of discharge rate limitations and heat losses.   BoundRateTES serves the same fundamental purpose as ThermalEnergyStorage, but its maximum charge and discharge rates are defined relative to the installed storage capacity.  This offers an advantage in an InvestmentModel, as it allows a fixed ratio between storage capacity and (dis-)charge capacity to be maintained when scaling the storage size.  In contrast, ThermalEnergyStorage allows the (dis-)charge capacities to be scaled independently of the storage capacity.","category":"page"},{"location":"nodes/thermalenergystorage/#nodes-TES-fields-stand","page":"ThermalEnergyStorage","title":"Standard fields","text":"","category":"section"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"The standard fields are given as:","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"id :\nThe field id is only used for providing a name to the storage. This is similar to the approach utilized in EnergyModelsBase.\nlevel::UnionCapacity :\nThe level parameters of the thermal energy storage node. The level storage parameters must include a capacity. Depending on the chosen type, the level parameters can include in addition variable OPEX and/or fixed OPEX. More information can be found on storage parameters.\nnote: Permitted values for storage parameters in `level`\nIf the node should contain investments through the application of EnergyModelsInvestments, it is important to note that you can only use FixedProfile or StrategicProfile for the capacity, but not RepresentativeProfile or OperationalProfile. Similarly, you can only use FixedProfile or StrategicProfile for the fixed OPEX, but not RepresentativeProfile or OperationalProfile. The variable operating expenses can be provided as OperationalProfile as well. In addition, all capacity and fixed OPEX values have to be non-negative.\nstor_res::Resource :\nThe stor_res is the stored Resource. In the case of a ThermalEnergyStorage, this resource should be a ResourceHeat.\ninput::Dict{<:Resource,<:Real} and output::Dict{<:Resource,<:Real}:\nBoth fields describe the input and output Resources with their corresponding conversion factors as dictionaries. All values have to be non-negative.\ninfo: Conversion factors\nWhile the field input includes a proper conversion factor and may allow for multiple resources, the value of the output Resources is not relevant.\ndata::Vector{<:ExtensionData} :\nAn entry for providing additional data to the model. In the current version, it is used for providing additional investment data when EnergyModelsInvestments is used.\nnote: Note\nThe field data is not required as we include a constructor when the value is excluded.","category":"page"},{"location":"nodes/thermalenergystorage/#nodes-TES-fields-new","page":"ThermalEnergyStorage","title":"Additional fields","text":"","category":"section"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"Both ThermalEnergyStorage and BoundRateTES nodes introduce an additional field for the heat loss factor:","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"heat_loss_factor::Float64 :\nThe heat loss factor describes the heat lost relative to the storage level.   It corresponds to the loss occurring between two operational periods for a given operational duration of 1 (see Utilize TimeStruct for details).","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"The allowed charging and discharging rates are specified in two different ways:  ","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"ThermalEnergyStorage nodes use the same field for the charging capacity as RefStorage nodes, and extend it by adding a field for discharging:","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"charge::AbstractStorageParameters and discharge::AbstractStorageParameters :\nThe charging and discharging parameters of the ThermalEnergyStorage.   Depending on the chosen type, these parameters can include variable OPEX, fixed OPEX, and/or capacity.   More information can be found in storage parameters.\nnote: When not specifying a discharge rate\nThe field discharge is not required as we include a constructor when the value is excluded. In that case, the discharging rate is set to the same value as the charging rate.","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"For BoundRateTES, two additional fields specify the maximum charging and discharging rates relative to the installed storage capacity:","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"level_charge::Float64 and level_discharge::Float64 :\nThe maximum charging and discharging rates of the BoundRateTES relative to the installed storage capacity. This implies that the unit is given as per operational period duration. Mathematically, this can be expressed as\n```math \\begin{aligned} level_charge & = max_charge / installed_storage_level  \\\nlevel_discharge &  = max_discharge / installed_storage_level \\end{aligned}","category":"page"},{"location":"nodes/thermalenergystorage/#nodes-TES-math","page":"ThermalEnergyStorage","title":"Mathematical description","text":"","category":"section"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"In the following mathematical equations, we use the name for variables and functions used in the model. Variables are in general represented as","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"textttvar_exampleindex_1 index_2","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"with square brackets, while functions are represented as","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"func_example(index_1 index_2)","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"with paranthesis.","category":"page"},{"location":"nodes/thermalenergystorage/#nodes-TES-math-var","page":"ThermalEnergyStorage","title":"Variables","text":"","category":"section"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"The ThermalEnergyStorage utilizes all standard variables from RefStorage, as described on the page Optimization variables:","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"textttopex_var\ntextttopex_fixed\ntextttstor_level\ntextttstor_level_inst\ntextttstor_charge_use\ntextttstor_charge_inst if the ThermalEnergyStorage has the field charge with a capacity\ntextttstor_discharge_use\ntextttstor_discharge_inst if the ThermalEnergyStorage has the field discharge with a capacity\ntextttflow_in\ntextttflow_out\ntextttstor_level_Δ_op\ntextttstor_level_Δ_rp if the TimeStruct includes RepresentativePeriods","category":"page"},{"location":"nodes/thermalenergystorage/#nodes-TES-math-con","page":"ThermalEnergyStorage","title":"Constraints","text":"","category":"section"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"ThermalEnergyStorage and BoundRateTES nodes utilize in general the standard constraints described in Constraint functions for Storage nodes. ThermalEnergyStorage and BoundRateTES nodes utilize the declared method for all nodes 𝒩. The following standard constraints are implemented for ThermalEnergyStorage and BoundRateTES nodes. ThermalEnergyStorage and BoundRateTES use the same methods, except for constraints_capacity.","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"constraints_capacity: For ThermalEnergyStorage\nbeginaligned\ntextttstor_level_usen t   textttstor_level_instn t \ntextttstor_charge_usen t   textttstor_charge_instn t \ntextttstor_discharge_usen t   textttstor_discharge_instn t\nendaligned\nFor BoundRateTES\nbeginaligned\ntextttstor_level_usen t   textttstor_level_instn t \ntextttstor_charge_usen t   textttstor_level_instn t times level_charge(n) \ntextttstor_discharge_usen t   textttstor_level_instn t times level_discharge(n) \nendaligned\nconstraints_capacity_installed: For ThermalEnergyStorage\nbeginaligned\ntextttstor_level_instn t  = capacity(level(n) t) \ntextttstor_charge_instn t  = capacity(charge(n) t) \ntextttstor_discharge_instn t  = capacity(discharge(n) t) \nendaligned\nFor BoundRateTES\nbeginaligned\ntextttstor_level_instn t  = capacity(level(n) t)\nendaligned\ntip: Using investments\nThe function constraints_capacity_installed is also used in EnergyModelsInvestments to incorporate the potential for investment. Nodes with investments are then no longer constrained by the parameter capacity.\nconstraints_flow_in:\nThe auxiliary resource constraints are independent of the chosen storage behavior:\ntextttflow_inn t p = inputs(n p) times textttflow_inn stor_res(n)\nqquad forall p in inputs(n) setminus stor_res(n)\nThe stored resource constraints do not include an efficiency:\ntextttflow_inn t stor_res(n) = textttstor_charge_usen t\nconstraints_flow_out:\ntextttflow_outn t stor_res(n) = textttstor_discharge_usen t\nconstraints_level:\nThe level constraints are more complex compared to the standard constraints. They are explained in detail below in Level constraints.\nconstraints_opex_fixed:\nbeginaligned\ntextttopex_fixedn t_inv =  \n  opex_fixed(level(n) t_inv) times textttstor_level_instn first(t_inv) +  \n  opex_fixed(charge(n) t_inv) times textttstor_charge_instn first(t_inv) +  \n  opex_fixed(discharge(n) t_inv) times textttstor_discharge_instn first(t_inv)\nendaligned\ntip: Why do we use `first()`\nThe variables textttstor_level_inst are declared over all operational periods (see the section on Capacity variables for further explanations). Hence, we use the function first(t_inv) to retrieve the installed capacities in the first operational period of a given strategic period t_inv in the function constraints_opex_fixed.\nconstraints_opex_var:\nbeginaligned\ntextttopex_varn t_inv =  sum_t in t_inv\n  opex_var(level(n) t) times textttstor_leveln t times scale_op_sp(t_inv t) +  \n  opex_var(charge(n) t) times textttstor_charge_usen t times scale_op_sp(t_inv t)\nendaligned\ntip: The function `scale_op_sp`\nThe function scale_op_sp(t_inv t) calculates the scaling factor between operational and strategic periods. It also takes into account potential operational scenarios and their probability as well as representative periods.\nconstraints_ext_data:\nThis function is only called for specified data of the storage node, see above.","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"info: Implementation of capacity and OPEX\nThe capacity constraints, both constraints_capacity and constraints_capacity_installed are only set for capacities that are included through the corresponding field and if the corresponding storage parameters have a field capacity. Otherwise, they are omitted. The field level is required to have a storage parameter with capacity.","category":"page"},{"location":"nodes/thermalenergystorage/#nodes-TES-math-con-level","page":"ThermalEnergyStorage","title":"Level constraints","text":"","category":"section"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"The overall structure is outlined on Constraint functions. The level constraints are called through the function constraints_level which then calls additional functions depending on the chosen time structure (whether it includes representative periods and/or operational scenarios) and the chosen storage behaviour. Note: ThermalEnergyStorage and BoundRateTES only make changes to the constraint_level_iteratefunction when CyclicStrategic is chosen as storage behaviour.","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"The constraints introduced in constraints_level_aux are given by","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"textttstor_level_Δ_opn t = textttstor_charge_usen t - textttstor_discharge_usen t","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"If the time structure includes representative periods, we calculate the change of the storage level in each representative period within the function constraints_level_iterate:","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"textttstor_level_Δ_rpn t_rp = sum_t in t_rp\ntextttstor_level_Δ_opn t times scale_op_sp(t_rp t)","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"In the case of CyclicStrategic, we add an additional constraint to the change in the function constraints_level_rp:","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"sum_t_rp in T^rp textttstor_level_Δ_rpn t_rp = 0","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"while we fix the value in the case of CyclicRepresentative to 0:","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"textttstor_level_Δ_rpn t_rp = 0","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"If the time structure includes operational scenarios using CyclicRepresentative, we enforce that the last value in each operational scenario is the same within the function constraints_level_scp.","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"The general level constraint is eventually calculated in the function constraints_level_iterate:","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"textttstor_leveln t = prev_level +\ntextttstor_level_Δ_opn t times duration(t) -\nprev_level times heat_loss_factor(n) times duration(t)","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"in which the value prev_level is depending on the type of the previous operational (t_prev) and strategic level (t_invprev) (as well as the previous representative period (t_rpprev)). It is calculated through the function previous_level.","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"tip: Changes in ThermalEnergyStorage\nThis constraint is the only constraint adjusted by [ThermalEnergyStorage] nodes. All other functions and constraints are unchanged.","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"We can distinguish the following cases:","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"The first operational period (in the first representative period) in a strategic period (given by typeof(t_prev) = typeof(t_rp prev) = = nothing). In this situation, the previous level is dependent on the chosen storage behavior. In the default case of a Cyclic behaviors, it is given by the last operational period of either the strategic or representative period:\nbeginaligned\n  prev_level  = textttstor_leveln last(t_sp)\n  prev_level  = textttstor_leveln last(t_rp)\nendaligned\nIf the storage behavior is instead given by CyclicStrategic and the time structure includes representative periods, we calculate the previous level instead as:\nbeginaligned\nt_rplast  =  last(repr_periods(t_sp)) \nprev_level =  textttstor_leveln first(t_rplast) -  \n  textttstor_level_Δ_opn first(t_rplast) times duration(first(t_rplast)) +  \n  textttstor_level_Δ_rpn t_rplast\nendaligned\nt_rplast corresponds in this situation to the last representative period in the current strategic period.\nIf the storage behavior is instead given by CyclicStrategic, the previous level is set to 0:\nprev_level = 0\nThe first operational period in subsequent representative periods in any strategic period (given by typeof(t_prev) = nothing). The previous level is again dependent on the chosen storage behavior. The default approach calculates it as:\nbeginaligned\n prev_level =  textttstor_leveln first(t_rpprev) -  \n   textttstor_level_Δ_opn first(t_rpprev) times duration(first(t_rpprev)) +  \n   textttstor_level_Δ_rpn t_rpprev\nendaligned\nwhile a CyclicRepresentative storage behavior calculates it as:\nprev_level = textttstor_leveln last(t_rp)\nThis situation only occurs in cases in which the time structure includes representative periods.\nAll other operational periods:\n\n prev_level = textttstor_leveln t_prev","category":"page"},{"location":"nodes/thermalenergystorage/","page":"ThermalEnergyStorage","title":"ThermalEnergyStorage","text":"","category":"page"},{"location":"links/dhpipe/#links-DHPipe","page":"DHPipe","title":"DHPipe","text":"","category":"section"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"DHPipe links model the transport of heat in the form of hot water or other fluid in heating networks. They model the flow of energy from a source to a sink, that is we do not model a water/fluid with a given temperature and pressure. The heat losses are calculated based on the supply temperature of the inflowing ResourceHeat, together with the ground temperature, pipe length, and a heat loss coefficient. Heat losses in the return flow are therefore ignored, following the approach from [1]. These heat losses are in general very small, and in any case much smaller than the losses in the supply pipes [2]. Losses in the return pipe can even be negative in twin pipes, as heat leaks from the supply to the return line. Pressure losses are also excluded in the current version of the model; however, pressure losses and the required pumping power are in general very small compared to the heat supply (see, e.g., [3]).","category":"page"},{"location":"links/dhpipe/#links-DHPipe-fields","page":"DHPipe","title":"Introduced type and its fields","text":"","category":"section"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"DHPipe is implemented as equivalent to an abstract type Link. Hence, it utilizes the same functions declared in EnergyModelsBase.","category":"page"},{"location":"links/dhpipe/#links-DHPipe-fields-stand","page":"DHPipe","title":"Standard fields","text":"","category":"section"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"DHPipe has the following standard fields, equivalent to a Direct link:","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"id :\nThe field id is only used for providing a name to the link.\nfrom::Node :\nThe node from which there is flow into the link.\nto::Node :\nThe node from which there is flow out of the link.\nformulation::Formulation :\nThe used formulation of links. If not specified, a Linear link is assumed.\nnote: Different formulations\nThe current implementation of links does not provide another formulation. Our aim is in a later stage to allow the user to switch fast through different formulations to increase or decrese the complexity of the model.","category":"page"},{"location":"links/dhpipe/#links-DHPipe-fields-new","page":"DHPipe","title":"Additional fields","text":"","category":"section"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"The following additional fields are included for DHPipe links:","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"cap::TimeProfile :\nThe maximum heat transport capacity of the pipe. The value should be higer than the expected maximum heat demand for the load the given pipe segment is delivering heat to. If the link should contain investments through the application of EnergyModelsInvestments, it is important to note that you can only use FixedProfile or StrategicProfile for the capacity, but not RepresentativeProfile or OperationalProfile. In addition, all values have to be non-negative.\npipe_length::Float64 :\nThe pipe length. The unit for the pipe length is directly related to the field pipe_loss_factor. It is hence advised to utilize, e.g. m as length unit for both.\npipe_loss_factor::Float64 :\nThe heat loss factor from the fluid to the ground per meter pipe given in [W/(m K)], [kW/(m K)] or [MW/(m K)], depending on the applied unit for energy. Typical values for heat loss coefficient (lambda) for the insulation in district heating pipes can be found at the website of the DH pipe manufacturer LOGSTOR. The pipe_loss_factor applied in DHPipe is however an overall loss factor considering not just the insulation, but also the pipe geometry (see [1]). This loss factor is typically a factor of ten or more higher than the lambda-values given in LOGSTOR.\nt_ground::TimeProfile :\nThe ground temperature in °C. The gound temperature can be approximated with the ambient temperature.\nresource_heat::ResourceHeat :\nThe resource used by DHPipe, which has to be of type ResourceHeat and must be equal to a resource flowing out of a to::Node and into a from::Node. ResourceHeat contains the supply and (optionally) return temperature applied in the district heating network. The supply temperature is used in the calculation of the heat losses.\ndata::Vector{<:ExtensionData}:\nAn entry for providing additional data to the model. In the current version, it is used for providing additional investment data when EnergyModelsInvestments is used.\nnote: Constructor for `DHPipe`\nThe field data is not required as we include a constructor when the value is excluded.","category":"page"},{"location":"links/dhpipe/#links-DHPipe-math","page":"DHPipe","title":"Mathematical description","text":"","category":"section"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"In the following mathematical equations, we use the name for variables and functions used in the model. Variables are in general represented as","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"textttvar_exampleindex_1 index_2","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"with square brackets, while functions are represented as","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"func_example(index_1 index_2)","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"with paranthesis.","category":"page"},{"location":"links/dhpipe/#links-DHPipe-math-var","page":"DHPipe","title":"Variables","text":"","category":"section"},{"location":"links/dhpipe/#links-DHPipe-math-var-stand","page":"DHPipe","title":"Standard variables","text":"","category":"section"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"DHPipe utilizes standard variables from the Link type, as described on the page Optimization variables. The variables include:","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"textttlink_in\ntextttlink_out","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"Both variable sets only include the specified resource_heat as resource through new methods for inputs and outputs.","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"In addition, DHPipe utilizes one of conditional variables for links:","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"textttlink_cap_inst","category":"page"},{"location":"links/dhpipe/#links-DHPipe-math-add","page":"DHPipe","title":"Additional variables","text":"","category":"section"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"It is an advantage to keep track of the heat losses in DHPipe. Hence, an additional variable is declared for heat loss through creating a new method for the function variables_link:","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"textttdh_pipe_lossl t: Heat loss in pipe segment l in operational period t with a typical unit of MW.\n","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"It is assumed that the heat loss is constant, i.e., independent of the amount of heat transported by the pipe. Heat losses thus depend only on the pipe length, the supply and ground temperatures and the pipe_loss_factor, as shown by the constraint functions below. This implies also that there is a heat loss even if there is no heat flowing through the pipe, but the water is standing still, which is the case also in practice.","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"It is advisable to check that the resulting relative heat loss is within an appropriate range (considering the size of the network and the supply temperature), and adjust the 'pipelossfactor' if needed. Typical heat losses relative to the total heat demand are in the range 10-20 % for city-wide district heating networks, which can have a total length up to hundreds of kilometers; and 3-5 % for local DH networks, with a typical length of a few kilometers.","category":"page"},{"location":"links/dhpipe/#links-DHPipe-math-con","page":"DHPipe","title":"Constraints","text":"","category":"section"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"The constraint functions are called within the function create_link. This includes both a standard constraint for Link and constraints related to the calculation of heat losses, given in the following.","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"The following sections omit the direct inclusion of the vector of district heating pipes. Instead, it is implicitly assumed that the constraints are valid forall l  L^DHPipe for all DHPipe types if not stated differently. In addition, all constraints are valid forall t in T (that is in all operational periods) or forall t_inv in T^Inv (that is in all strategic periods).","category":"page"},{"location":"links/dhpipe/#links-DHPipe-math-con-stand","page":"DHPipe","title":"Standard constraints","text":"","category":"section"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"The applied standard constraint is constraints_capacity_installed:","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"textttlink_cap_instl t = capacity(l t)","category":"page"},{"location":"links/dhpipe/#links-DHPipe-math-con-add","page":"DHPipe","title":"Additional constraints","text":"","category":"section"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"All additional constraints are created within a new method for the function create_link.","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"The calculation of the heat losses is included through the relationship between the flow into and out from the link","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"textttflow_outl t resource_heat(l) = textttflow_inl t resource_heat(l) - textttdh_pipe_lossl t","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"as well as the direct loss","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"textttdh_pipe_lossl t = pipe_length(l) times pipe_loss_factor(l) times (t_supply(l) - t_ground(l))","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"In addition, the heat energy flowing in to the pipe should not exceed the maximum pipe capacity, which is included through the following constraint:","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"textttflow_inl t resource_heat(l) leq textttlink_cap_instl t","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"warning: Heat loss\nTo make sure that the amount of heat flowing out of the pipe does not become negative, the heat losses occurring in the pipe should not be higher than the amount of heat entering the pipe, i.e.:textttflow_inl t resource_heat(l)  textttdh_pipe_lossl t","category":"page"},{"location":"links/dhpipe/","page":"DHPipe","title":"DHPipe","text":"","category":"page"},{"location":"nodes/heatexchanger/#nodes-HeatExchanger","page":"HeatExchanger","title":"HeatExchanger","text":"","category":"section"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"The HeatExchanger node models a technology that converts higher-temperature heat from a surplus heat source into lower-temperature heat that can be used in a district heating system.","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"The HeatExchanger will compute the available energy, given the supply and return temperatures of the heat from the surplus heat circuit, the minimum temperature approach Delta T_min of the HeatExchanger, and the supply and return temperatures of the district heating circuit. These parameters may all be given as TimeProfile (which in many cases will be a FixedProfile).","category":"page"},{"location":"nodes/heatexchanger/#nodes-HeatExchanger-fields","page":"HeatExchanger","title":"Introduced type and its fields","text":"","category":"section"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"The HeatExchanger is a subtype of the NetworkNode. It uses the same functions as NetworkNode in EnergyModelsBase.","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"HeatExchanger are parametric types which allow for the inclusion of different HeatExchangerAssumptions. This approach is similar to the approach utilized for Storage in EnergyModelsBase. These assumption determine how the two streams behave towards each other. The strict assumption of EqualMassFlow enforces that the mass flow of both streams is the same while the assumption DifferentMassFlow allows for differing mass flows, and hence, optimization of these flows.","category":"page"},{"location":"nodes/heatexchanger/#nodes-HeatExchanger-fields-stand","page":"HeatExchanger","title":"Standard fields","text":"","category":"section"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"id:\nThe field id is only used for providing a name to the node. This is similar to the approach utilized in EnergyModelsBase.\ncap::TimeProfile:\nSpecifies the installed heating capacity, that is the heat the heat exchanger can deliver.\nIf the node should contain investments through the application of EnergyModelsInvestments, it is important to note that you can only use FixedProfile or StrategicProfile for the capacity, but not RepresentativeProfile or OperationalProfile.\nIn addition, all values have to be non-negative.\nopex_var::TimeProfile:\nThe variable operational expenses are based on the capacity utilization through the variable :cap_use. Hence, it is directly related to the specified output ratios. The variable operating expenses can be provided as OperationalProfile as well.\nopex_fixed::TimeProfile:\nThe fixed operating expenses are relative to the installed capacity (through the field cap) and the chosen duration of a strategic period as outlined on Utilize TimeStruct.\nIt is important to note that you can only use FixedProfile or StrategicProfile for the fixed OPEX, but not RepresentativeProfile or OperationalProfile. In addition, all values have to be non-negative.\ninput::Dict{<:Resource, <:Real}:\nThe field input includes the input Resources with their corresponding conversion factors as dictionaries. In the case of a heat exchanger, input should always include exactly one resource: the heat resource used in the surplus heat system. The value of the heat resource is in general 1. All values have to be non-negative.\noutput::Dict{<:Resource, <:Real}:\nThe field output includes the output Resources with their corresponding conversion factors as dictionaries. In the case of a heat exchanger, output should always include exactly one resource: the heat resource used within the district heating system. The value of the heat resource is in general 1. All values have to be non-negative.\ndata::Vector{<:ExtensionData}:\nAn entry for providing additional data to the model. In the current version, it is only relevant for additional investment data when EnergyModelsInvestments is used or for additional emission data through EmissionsProcess. The latter would correspond to uncaptured CO₂ that should be included in the analyses.","category":"page"},{"location":"nodes/heatexchanger/#nodes-HeatExchanger-fields-new","page":"HeatExchanger","title":"New fields","text":"","category":"section"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"delta_t_min::Real:\nThe minimum temperature approach of the heat exchanger. It is in general a design parameter that impacts the size of the heat exchanger and how much heat can be recovered from the hot stream.","category":"page"},{"location":"nodes/heatexchanger/#nodes-HeatExchanger-math","page":"HeatExchanger","title":"Mathematical description","text":"","category":"section"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"In the following mathematical equations, we use the name for variables and functions used in the model. Variables are in general represented as","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"textttvar_exampleindex_1 index_2","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"with square brackets, while functions are represented as","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"func_example(index_1 index_2)","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"with paranthesis.","category":"page"},{"location":"nodes/heatexchanger/#nodes-HeatExchanger-math-var","page":"HeatExchanger","title":"Variables","text":"","category":"section"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"The HeatExchanger node uses standard NetworkNode variables, as described on the page Optimization variables. The variables include:","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"textttopex_var\ntextttopex_fixed\ntextttcap_use\ntextttcap_inst\ntextttflow_in\ntextttflow_out","category":"page"},{"location":"nodes/heatexchanger/#nodes-HeatExchanger-math-con","page":"HeatExchanger","title":"Constraints","text":"","category":"section"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"The following sections omit the direct inclusion of the vector of heat exchanger nodes. Instead, it is implicitly assumed that the constraints are valid forall n  N^HeatExchanger for all HeatExchanger types if not stated differently. In addition, all constraints are valid forall t in T (that is in all operational periods) or forall t_inv in T^Inv (that is in all strategic periods).","category":"page"},{"location":"nodes/heatexchanger/#nodes-HeatExchanger-math-con-stand","page":"HeatExchanger","title":"Standard constraints","text":"","category":"section"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"Heat exchanger nodes utilize in general the standard constraints described on Constraint functions for NetworkNodes. These standard constraints are:","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"constraints_capacity:\ntextttcap_usen t leq textttcap_instn t\nconstraints_capacity_installed:\ntextttcap_instn t = capacity(n t)\ntip: Using investments\nThe function constraints_capacity_installed is also used in EnergyModelsInvestments to incorporate the potential for investment. Nodes with investments are then no longer constrained by the parameter capacity.\nconstraints_opex_fixed:\ntextttopex_fixedn t_inv = opex_fixed(n t_inv) times textttcap_instn first(t_inv)\ntip: Why do we use `first()`\nThe variable textttcap_inst is declared over all operational periods (see the section on Capacity variables for further explanations). Hence, we use the function first(t_inv) to retrieve the installed capacity in the first operational period of a given strategic period t_inv in the function constraints_opex_fixed.\nconstraints_opex_var:\ntextttopex_varn t_inv = sum_t in t_inv opex_var(n t) times textttcap_usen t times scale_op_sp(t_inv t)\ntip: The function `scale_op_sp`\nThe function scale_op_sp(t_inv t) calculates the scaling factor between operational and strategic periods. It also takes into account potential operational scenarios and their probability as well as representative periods.\nconstraints_ext_data:\nThis function is only called for specified data of the storage node, see above.","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"The constraints_flow_out function is replaced with a new implementation for HeatExchangers nodes.","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"The flow out of heat that can be used in the district heating system p_DH is limited by the available fraction dh_fraction(A pd t) of the flow of the surplus heat resource p_SH flow into the node.","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"textttflow_outn t p_SH =\n  dh_fraction(A pd t) times textttflow_inn t p_DH","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"The available fraction of heat available for the district heating system is calculated using the temperatures of the two resources p_SH and p_DH as well as the Delta T_min for the heat exchanger.","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"The default assumption A for a HeatExchanger in EnergyModelsHeat is that the medium in both circuits is the same, but mass flows may be adjusted individually in each circuit to optimise heat transfer (DifferentMassFlow):","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"fracdotQ_textDHdotQ_textSH =\n  begincases\n    0  textfor  T_textDH_texthot\n       T_textSH_texthot - Delta T_textmin\n    \n    fracT_textSH_texthot - (T_textDH_textcold + Delta T_textmin )T_textSH_texthot - T_textSH_textcold  textfor  T_textSH_textcold\n       T_textDH_textcold + Delta T_textmin\n    \n    1  textotherwise\n  endcases","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"Alternatively, we can specify the more restrictive assumption that mass flows are the same in both circuits (EqualMassFlow)","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"fracdotQ_textDHdotQ_textSH =\n  begincases\n    0  textfor  T_textDH_texthot - T_textDH_textcold\n       T_textSH_texthot - T_textSH_textcold\n    \n    0  textfor  T_textSH_textcold\n       T_textDH_textcold + Delta T_textmin   (textor T_textDH_texthot  T_textSH_texthot - Delta T_textmin )\n    \n    fracT_textDH_texthot - T_textDH_textcold T_textSH_texthot - T_textSH_textcold\n      textotherwise\n  endcases","category":"page"},{"location":"nodes/heatexchanger/#nodes-HeatExchanger-math-con-add","page":"HeatExchanger","title":"Additional constraints","text":"","category":"section"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"HeatExchanger do not add additional constraint functions or constraints in the create_node function.","category":"page"},{"location":"nodes/heatexchanger/","page":"HeatExchanger","title":"HeatExchanger","text":"","category":"page"},{"location":"library/internals/methods-fields/#lib-int-met_field","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"","category":"section"},{"location":"library/internals/methods-fields/#lib-int-met_field-idx","page":"Methods - Accessing fields","title":"Index","text":"","category":"section"},{"location":"library/internals/methods-fields/","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"Pages = [\"methods-fields.md\"]","category":"page"},{"location":"library/internals/methods-fields/#lib-int-met_field-dhpipe","page":"Methods - Accessing fields","title":"DHPipe","text":"","category":"section"},{"location":"library/internals/methods-fields/#EnergyModelsHeat.pipe_length","page":"Methods - Accessing fields","title":"EnergyModelsHeat.pipe_length","text":"pipe_length(l::DHPipe)\n\nReturns the length of the pipe l.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsHeat.pipe_loss_factor","page":"Methods - Accessing fields","title":"EnergyModelsHeat.pipe_loss_factor","text":"pipe_loss_factor(l::DHPipe)\n\nReturns the heat loss factor λ for the pipe l.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsHeat.t_ground","page":"Methods - Accessing fields","title":"EnergyModelsHeat.t_ground","text":"t_ground(l::DHPipe)\n\nReturns the ground temperature for the pipe l.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsHeat.resource_heat","page":"Methods - Accessing fields","title":"EnergyModelsHeat.resource_heat","text":"resource_heat(l::DHPipe)\n\nReturns the transported ResourceHeat for pipe l.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsHeat.t_supply","page":"Methods - Accessing fields","title":"EnergyModelsHeat.t_supply","text":"t_supply(rh::ResourceHeat)\nt_supply(rh::ResourceHeat, t)\n\nReturn the supply temperature defined for a ResourceHeat.\n\n\n\n\n\nt_supply(l::DHPipe)\n\nReturns the supply temperature of applied ResourceHeat.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#lib-int-met_field-heatpump","page":"Methods - Accessing fields","title":"HeatPump","text":"","category":"section"},{"location":"library/internals/methods-fields/#EnergyModelsHeat.eff_carnot","page":"Methods - Accessing fields","title":"EnergyModelsHeat.eff_carnot","text":"eff_carnot(n::HeatPump)\neff_carnot(n::HeatPump, t)\n\nReturns the Carnot efficiency of heat pump n as TimeProfile or in operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsHeat.t_sink","page":"Methods - Accessing fields","title":"EnergyModelsHeat.t_sink","text":"t_sink(n::HeatPump)\nt_sink(n::HeatPump, t)\n\nReturns the temperature of the heat sink for heat pump n as TimeProfile or in operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsHeat.t_source","page":"Methods - Accessing fields","title":"EnergyModelsHeat.t_source","text":"t_source(n::HeatPump)\nt_source(n::HeatPump, t)\n\nReturns the temperature of the heat source for heat pump n as TimeProfile or in operational period t.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsHeat.cap_lower_bound","page":"Methods - Accessing fields","title":"EnergyModelsHeat.cap_lower_bound","text":"cap_lower_bound(n::HeatPump)\n\nReturns the lower capacity bound for heat pump n.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsHeat.heat_in_resource","page":"Methods - Accessing fields","title":"EnergyModelsHeat.heat_in_resource","text":"heat_in_resource(n::HeatPump)\n\nReturns the resource for heat input for heat pump n.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsHeat.driving_force_resource","page":"Methods - Accessing fields","title":"EnergyModelsHeat.driving_force_resource","text":"driving_force_resource(n::HeatPump)\n\nReturns the resource for driving force, i.e., electricity, for heat pump n.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#lib-int-met_field-thermalenergystorage","page":"Methods - Accessing fields","title":"ThermalEnergyStorage","text":"","category":"section"},{"location":"library/internals/methods-fields/#EnergyModelsHeat.heat_loss_factor","page":"Methods - Accessing fields","title":"EnergyModelsHeat.heat_loss_factor","text":"heat_loss_factor(n::ThermalEnergyStorage)\n\nReturns the heat loss factor for storage n.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsHeat.level_discharge","page":"Methods - Accessing fields","title":"EnergyModelsHeat.level_discharge","text":"level_discharge(n::BoundRateTES)\n\nReturns the ratio of the maximum discharge rate and storage level capacity for TES n.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#EnergyModelsHeat.level_charge","page":"Methods - Accessing fields","title":"EnergyModelsHeat.level_charge","text":"level_charge(n::BoundRateTES)\n\nReturns the ratio of the maximum charge rate and storage level capacity for TES n.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/methods-fields/#lib-int-met_field-heatexchanger","page":"Methods - Accessing fields","title":"HeatExchanger","text":"","category":"section"},{"location":"library/internals/methods-fields/#lib-int-met_field-pinchdata","page":"Methods - Accessing fields","title":"PinchData","text":"","category":"section"},{"location":"library/internals/methods-fields/","page":"Methods - Accessing fields","title":"Methods - Accessing fields","text":"","category":"page"},{"location":"reference/api/","page":"-","title":"-","text":"","category":"page"},{"location":"background/bio_chp/#back-bio_CHP","page":"Bio CHP","title":"BioCHP plant module","text":"","category":"section"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The BioCHP plant module incorporates the following mass/energy streams and unit process operations:","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"graph LR\nA1[Biomass] ---> B(Storage, preparation and feeding)\nA2[Biomass] ---> B(Storage, preparation and feeding)\nB(Storage, preparation and feeding)---> C(Boiler)\nair----->C\nC -- steam --> E(Rankine cycle)--electricity --->F(El. network)\nE -- steam --> G1(HX)-->H1(district heating)\nE -- steam --> G2(HX)-->H2(district heating)\nC -- raw flue gas --> D(Flue gas cleaning) --> L(Flue gas fan) -- clean flue gas --> I[Emissions to air]\nD -- solid residue ---> K(Disposal)\nC -- bottom ash ----> J(Disposal)","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The model includes the following main processes:","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"Supply, storage and handling of the solid biomass,\nCombustion of the biomass with recovery of the combustion heat for production of superheated steam,\nDirect utilization of the steam for production of electricity in steam turbine\nProduction of heat through extractions from the steam turbine\nCleaning of the raw flue gas after combustion to remove particulate matter, acid gases and volatile organic components.","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The capacity of the bioCHP plant is defined in term of the total power output from the biomass boiler, calculated from the electric power and heat demands. The model considers two sold residues, i.e., bottom ash from the boiler and residue from flue gas cleaning containing fly ash and consumed lime.","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"Important features of the mode includes:","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The feedstock is defined as a mixture of several type of Biomass resources.\nMultiple heat demands, specified by thermal Power, temperature and pressure, for district heating (each through a heat exchanger) or as **direct steam export*.","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The module is implemented as a nonlinear C++ model. It allows for multiple different configurations It is not directly linked to EnergyModelsX. Instead, a simpling routine for capturing both the costs (capital expenditures and operating expenses) as well as the performance (heat to power production and varying power levels) will be implemented in a later stage. This sampling routine allows a tight integration of the model within the EnergyModelsX framework.","category":"page"},{"location":"background/bio_chp/#back-bio_CHP-par","page":"Bio CHP","title":"Parameters","text":"","category":"section"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The parameters of the BioCHP plan model can be differentiated into external inputs and internal parameters as defined below.","category":"page"},{"location":"background/bio_chp/#back-bio_CHP-par-inp","page":"Bio CHP","title":"Inputs","text":"","category":"section"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The first relevant input category is related to the used biomass in the CHP plant. The biomass is included in the module through a combination of strings. It is hence necessary to use the strings specified within the module. The following input is required for the biomass feed:","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"none (fuel_def in the model as vector[string]) is the type of biomass. Multiple biomass types can be provided to the module, e.g., spruce_bark.\nThe current implemented feedstock strings are spruce_stem, spruce_bark, spruce_T&B and birch_stem.\nY_j^F (Y_fuel[j] in the model as vector[double]) is the mass fraction of biomass resource j in the feed. The total mass fraction must sum to 1.\nY_H_2Oj^F (YH2O_fuel[j] in the model as vector[double]) is the moisture content of biomass resource j as mass fraction. It corresponds to the water content in the total wet mass.","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"In addition, we have to provide the input for the desired plant characteristics. This input can be specified by the user through text file, although upper bounds may exist for some variables. The following input is required for the plant characteristics:","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"T_hk (T_h[k] in the model as vector[double]) is the temperature level of heat demand k in °C. As the CHP plant can provide heat at several temperature levels, it is possible to specify them directly.\nP_hk (P_h[k] in the model as vector[double]) is the outlet pressure of heat demand k in bar gauge. This implies that you have to provide the pressure through subtracting the ambient pressure. The combination of the temperature and the pressure determines whether the heat is supplied as steam or as hot water.\ndotQ_k (Q_h[k] in the model as vector[double]) is the heat demand at the individual temperature and pressure levels k in MW.\ndotW_el (W_el in the model as double) is the electric power output of the CHP plant in MW.","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"note: Vector positions\nBoth the input biomass and heat demands are specified as vectors. This implies that the position of the types of biomass, their mass fraction, and the moisture content requires a correct indexing. Similarly, the thermal power, temperature and pressure conditions of the heat demands are required to follow the correct indexing.","category":"page"},{"location":"background/bio_chp/#back-bio_CHP-par-int","page":"Bio CHP","title":"Internal","text":"","category":"section"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The different biomass have furthermore a set of internal parameters. These parameters describe the characteristics of the biomass that are fundamental properties of the respective biomass. Adding a new type of biomass requires hence the addition of the following parameters:","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"Y_ij^F (Yi.fuel[j] in the model) is the atomic composition of biomass j in kg/kg dry basis, that is without any water content.\nY_ashj^F (Yash.fuel[j] in the model) ; is the ash content in biomass j (kg/kg dry basis)\nLHV_j^F (LHV.fuel[j] in the model) is the lower heating value of biomass j in MJ/kg.\nx is the hydrogen to carbon atomic molar ratio.\ny is the oxygen to carbon atomic molar ratio.","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"Furthermore, process characteristics can be specified internally:","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"lambda_air^comb (lambda_comb in the model) is the excess air in combustion process (-).\nT_stm^boiler (T_stm in the model) is the Boiler steam temperature in °C.\nP_stm^boiler (P_stm in the model) is the Boiler steam pressures in bar gauge.\neta_S^ST_n (eta_s[n] in the model) is the isentropic efficiency for steam turbine stage n. The individual steam turbines of the rankine cycle can have different isentropic efficiencies.","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"tip: Format of the parameters\nAll internal parameters are required as double types in the model.","category":"page"},{"location":"background/bio_chp/#back-bio_CHP-par-out_stand","page":"Bio CHP","title":"Outputs (standard)","text":"","category":"section"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The standard output of the model is given as","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"dotM_F (M_fuel in the model) is the input mass flow rate of biomass to BioCHP plant in kg/s.\ndotH_F;(H_fuel in the model) Input energy flow rates of biomass to BioCHP plant in MW.\nC_inv(C_inv in the model) are the capital expenditures in M$.\nC_opd (C_op_d in the model) are the annual direct variable operating expenses in M$. It is assumed that the plant operates at XXX h/year at full capacity.\nC_opf (C_op_f in the model) are the annual fixed operating expenses in M$.","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"tip: Format of the outputs\nAll outputs are required as double types in the model.","category":"page"},{"location":"background/bio_chp/#back-bio_CHP-math","page":"Bio CHP","title":"Mathematical formulation","text":"","category":"section"},{"location":"background/bio_chp/#back-bio_CHP-math-balances","page":"Bio CHP","title":"Mass and energy flows (nominal steady state operation)","text":"","category":"section"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"Considering","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"a biomass mixture defined by the mass fraction of each type of feedstock in the mixture Y_j^F,\nthe net power production from the Rankine cycle dotW_el^RK, and\nthe external heat demands dotQ_k","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"as inputs, the total energy rate of the input biomass to the CHP plant dotH_F with N_q steam extractions to cover heat demands is calculated as","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"dotW_el^RK = sum_n=0^N_q left(dotH_F frac(q_stm^boilerh_fuel)(h_stm^boiler-h_bfw^boiler) - sum_k=0^n dotQ_k(h_stm^k-h_o^k) right) (h_in^ST_n-h_outs^ST_n)eta_S^ST_n","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"with","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"q_stm^boiler = h_fuel - h_g^FGC - h_ba^boiler - h_s^FGC(1-q_loss)","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"that is the difference in mass enthalpy between the biomass fuel and the output from the system, that is the flue gas, the fly ash, and the bottom ash. The value q_loss corresponds in this situation to the fraction of heat loss.","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The specific enthalpy of the fuel is calculated through the lower heating values of the individual biomass resources (indexed through j), excluding the moisture in the resources (indexed throguh H_2O):","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"h_fuel = sum_j Y_j^F(1-Y_H_2Oj) LHV_j-Y_H_2Ojh_vH_2O","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The specific enthalpy of the combustion gas can be calculated through the difference between its temperature and the reference temperature T_0, the heat capacities c_pgj as well as","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"h_g^FGC  = (T_g^FGC-T_0) sum_j Y_j^F c_pgj left(Y_H2Oj+(1-Y_H2Oj)1+lambda_air^comb Y_Cj(W_airW_C)(1+x4-y2)right)","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"Here W_air and W_C are the molecular weight of air (28 g/mol) and atomic weight of carbon (12 g/mol).","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The specific enthalpy of the bottom ash is given by","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"h_ba^boiler  = c_ba (T_ba^boiler-T_0) + Y_Cbah_C f_basum_j dotY_j^F (1-y_H2Oj) Y_ashj^F","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"with c_ba being the specific heat capacity of the bottom ash, f_ba being the fraction of the total ash produced as bottom ash, and Y_Cba is the mass fraction of carbon in the bottom ash. The the specific enthalpy of the flue gas per unit mass feedstock is given by","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"h_s^FGC  = (T_s^FGC-T_0) m_limec_lime + f_fa c_fasum_j dotY_j^F (1-Y_H2Oj) Y_ashj^F","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"with c_fa being the specific heat capacity of the fly ash and f_fa being the fraction of the total ash transfer as fly ash to the flue gas.","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"note: Specific enthalpies\nAll specific enthalpies described above are relative to the mass flow of the biomass feedstock dotM_F.","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"Using the calculated value for dotH_F, other material and energy flows for the BioCHP plant are calculated:","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"Mass flow rate of the biomass mixture and of each feedstock j:\nbeginaligned\n  dotM_F  = dotH_Fh_fuel \n  dotM_j^F  = dotM_F sum_j=1^N_j Y_j^F \nendaligned\nMass flow rate and energy flow rate of bottom ash (ba) from the boiler:\nbeginaligned\n  dotM_ba^boiler  = dotM_F (1+Y_Cba) f_ba sum_j Y_ashj^F dotY_j^F (1-Y_H2Oj) \n  dotH_ba^boiler  = dotM_F h_ba^boiler \nendaligned\nInlet mass flow rate of lime to flue gas cleaning:\ndotM_lime = dotM_F m_limeb sum_j fracY_Sj +Y_CljY_Sb+Y_Clb\nMass flow rate and energy flow rate of solid residue (s) from the flue gas cleaning:","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"  beginaligned\n    dotM_s^FGC  = dotM_F m_lime + f_fa sum_j dotY_j^F (1-Y_H2Oj) Y_ashj^F \n    dotH_s^FGC  = dotM_F h_s^FGC \n  endaligned","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"Mass and energy flow rates of flue gas from the CHP plant:\nbeginaligned\n  dotM_g^FGC  = dotM_F sum_j dotY_j^FY_H2Oj+(1-Y_H2Oj)1+lambda_air^comb Y_Cj(W_airW_C)(1+x4-y2) \n  dotH_g^FGC  =  dotM_F h_g^FGC \nendaligned\nThermal energy and mass flow rates of steam (stm) produced from the boiler:\nbeginaligned\n  dotQ_stm^boiler  = dotH_fuel - dotH_g^FGC - dotH_ba^boiler - dotH_s^FGC(1-q_loss) \n  dotM_stm^boiler  = dotQ_stm^boiler(h_stm^boiler-h_bfw^boiler) \nendaligned","category":"page"},{"location":"background/bio_chp/#back-bio_CHP-math-CAPEX","page":"Bio CHP","title":"CAPEX","text":"","category":"section"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The installed cost of equipment k is calculated from","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"C_eqk = C_Pk^B (S_kS_k^B)^n_k (II_B ) f_instk","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"where C_Pk^B is the purchase equipment cost for a base-case equipment size S_k^B and the reference year (base), S_k is the actual size of the equipment, n_k is the equipment scale factor, and f_instk is the equipment installation factor. II_B is the price index ratio between the actual year and the reference year. It can be evaluated using the Chemical Engineering Plant Cost Index (CEPCI).","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The following quipment cost parameters are used:","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"Equipment S_k^B C_Pk^B ($M) f_instk n_k Base year\nBiomass storage and preparation 25 t/h 5.4 2.1 0.5 2007\nBiomass boiler 25 t/h 7.9 2.1 0.7 2007\nFlue gas cleaning 67 t/h 0.18 2.7 0.7 2007\nSteam turbines and condenser 1500 MW 40.5 1.3 0.7 2006\nHeat Exchanger (heat export) 100 m² 0.086 2.8 0.71 2012","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The total equipment cost is then given by","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"C_eq = sum_k C_eqk","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The total capital expenditures (CAPEX) is evaluated in terms of the total permanent investment C_inv from:","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"C_inv = sum_k C_eqk (1+f_pip+f_el+f_IC)(1+f_site+f_building)+f_com(1+f_contk+f_engk)(1+f_dev)","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"where C_eqk denotes the installed cost of equipment, and f_i are cost parameters defined as","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"f_pip = 0065 for interconnecting piping between equipment,\nf_el = 005 for plant electric system,\nf_IC = 005 for instrumentation and control system,\nf_site = 017  for land and site preparation,\nf_building = 020 for construction of buildings,\nf_com = 010 for commissioning, and\nf_dev = 002 for project development and licenses.\nf_engk = 015 for engineering\nf_contk = 020 for contingency","category":"page"},{"location":"background/bio_chp/#back-bio_CHP-math-OPEX","page":"Bio CHP","title":"OPEX","text":"","category":"section"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The OPEX is defined as total annual operating costs calculated from","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"C_op = C_opd + C_opf","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"where:","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"C_opd denotes the variable operating cost, proportional to the annual operating time t_op, including the\nsupply of biomass with a unit price of 100 $/t,\npurchase of lime with a unit cost of 0.25 $/kg,\ndisposal of flue gas cleaning solid residue with unit cost of 40.0 $/t, and the\ndisposal of bottom ash with unit cost of 20.0 $/t\nC_opf are fixed operating costs required for having the BioCHP plant in activity includin the\nmaintenance cost:\nC_maint = 005 C_eq\ninsurance:\nC_ins = 001 C_inv\nadministration and site services:\nC_adm = 003 C_inv\nlabor cost:\nC_labor = sum_kN_k^labor c_bk^labor1+f_ohk^labor\nwith subscript k denoting the personnel categories, N_k^labor are the number of employees in each personnel category, c_bk^labor is the net annual cost for each personnel category, and f_ohk^labor is the overhead cost.","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"The balues for the cost parameters for each personnel categories are:","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"plant manager:\nbeginaligned\n  c_bk^labor  = 162kyear \n  N_k^labor  = 1 \n  f_ohk^labor  = 00 \nendaligned\nO&M manager:\nbeginaligned\n  c_bk^labor  = 96kyear \n  N_k^labor  =\n    begincases\n      1  textif  dotM_F  10 textth \n      2  textif  dotM_F  10 textth \n    endcases \n  f_ohk^labor  = 12 \nendaligned\nO&M engineer::\nbeginaligned\n  c_bk^labor  = 88kyear \n  N_k^labor  =\n    begincases\n      1  textif  dotM_F  10 textth \n      2  textif  dotM_F  10 textth \n    endcases \n  f_ohk^labor  = 12 \nendaligned\nshift operator:\nbeginaligned\n  c_bk^labor  = 37kyear \n  N_k^labor  =\n    begincases\n      3  textif  dotM_F  10 textth \n      6  textif  dotM_F  10 textth \n    endcases \n  f_ohk^labor  = 13 \nendaligned","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"note: Number of employees\nThe number of employess is depending on the size of the plant. The chosen distinction is based on the mass flow of biomass into the plant dotM_F with a differentiation included at a change in the flow of 10 t/h.","category":"page"},{"location":"background/bio_chp/#back-bio_CHP-file_struct","page":"Bio CHP","title":"File structure","text":"","category":"section"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"bioCHP.cpp  contains the C++ function to interface with EMX. It has the following structure:","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"├── Definitions.h\n├── Costs.h\n├── Flows\n│   ├── Flow_definitions.h\n│   ├── Flow_calculations.h`\n│   └── Thermodynamics\n│       └── Water_thermodynamics.h\n└── Processes\n    ├── bioCHP_plant.h\n    ├── Combustion.h\n    ├── Rankine_cycle.h\n    └── Flue_gas_cleaning.h","category":"page"},{"location":"background/bio_chp/","page":"Bio CHP","title":"Bio CHP","text":"","category":"page"},{"location":"background/background/#Background","page":"Heat exchanger","title":"Background","text":"","category":"section"},{"location":"background/background/#Heat-integration","page":"Heat exchanger","title":"Heat integration","text":"","category":"section"},{"location":"background/background/","page":"Heat exchanger","title":"Heat exchanger","text":"Process integration is a useful tool for benchmarking the potential for heat recovery in a system. It was first conceptualized through Pinch Analysis, a method that revolves around finding the process pinch point where the hot and cold composite curves converge. At the pinch point the process can be decoupled into two parts; a heat deficit region above pinch and a heat surplus region below. Consequently, any heat transfer across the pinch constitutes taking heat from the heat surplus region and supply it to the heat deficit region. One therefore can maximize heat recovery by eliminating any existing cross pinch heat transfer. More times than not, however, the maximum energy recovery (MER) design serves as an upper limit to heat integration that would require significant capital investments to realize. Meanwhile, the actual best design is very much dependent on the application and weighs capital expenditures to heat recovery. Although originally based on a manual procedure, mathematical optimization has since found its way into the heat integration community, and today many automated pinch location algorithms exist in the literature [4–8].","category":"page"},{"location":"background/background/","page":"Heat exchanger","title":"Heat exchanger","text":"The oldest and among the most well known pinch location algorithms is the transshipment model by Papoulias and Grossmann [9]. The transshipment model formulates the heat integration target as a linear program (LP) that lumps the individual stream contributions into heat residuals that cascades down the temperature intervals. The maximum energy recovery (MER) design is the arrangement with the least hot utility supply (see Equations PAPOULIAS and HEATINTERVAL). Though inherently more simplistic than the pinch location algorithms listed above, the transshipment model benefits from its auspicious linear formulation and favourable scaling.","category":"page"},{"location":"background/background/","page":"Heat exchanger","title":"Heat exchanger","text":"tagPAPOULIAS\nbeginaligned\n undersetr_itextminimize\n  r_0\n textsubject to \n   r_i = r_i-1 + q_i quad forall iin M\n   r_i geq 0 quad forall iin M \nendaligned","category":"page"},{"location":"background/background/","page":"Heat exchanger","title":"Heat exchanger","text":"where r_i are the heat residuals in temperature interval i, M is total number of streams, and q_i is the surplus heat as given by ","category":"page"},{"location":"background/background/","page":"Heat exchanger","title":"Heat exchanger","text":"tagHEATINTERVAL\n    q_i = sum_min H F_m(T_i-1 - T_i) - sum_nin Cf_n(t_i-1-t_i)","category":"page"},{"location":"background/background/","page":"Heat exchanger","title":"Heat exchanger","text":"In Equation (HEATINTERVAL), F, T, f and t denote the heat capacity flowrates and temperatures of the respective hot and cold streams. The heat residual at a given temperature interval corresponds to the surplus heat available at this temperature.","category":"page"},{"location":"background/background/","page":"Heat exchanger","title":"Heat exchanger","text":"(Image: Grand composite curve depicting the heat deficit region above pinch and heat surplus region below.)","category":"page"},{"location":"background/background/","page":"Heat exchanger","title":"Heat exchanger","text":"The transition model relies on temperatures and heat capacity flowrates being known and fixed throughout. In an optimization model, it would therefore make sense to nest the transshipment model in a separate subroutine that calculates the heat residuals prior to optimizaiton of the overall model. Although the model is normally applied to find the optimal use of heat utilities (minimize external utility consumption), the model has the advantage of mapping the residual heat present at different temperature intervals. In other words, the transshipment model can also be used to calculate the heat available or heat necessary at a given temperature. This can be useful in cases where we look at trans-process heat integration or heat recovery in different clusters. Even though the fixed temperatures and heat capacity flowrates present inherent limitations to the implementation of the model, there is a way to bypass it, when looking at trans-process heat integration. In the Intercur model, which was developed with heat integration of industrial clusters in mind, a slight alteration was made to the model, where the heat capacity flowrates were formulated as F =fracmCpn_textrmproduct where n_textrmproduct is used to represent one unit of output product. In this case, the transshipment model maps the available heat/heat needed per unit output product. As for the fixed temperature intervals, this too can be circumvented in cases where the possible discrete temperature intervals are known a priori by adding a binary decision variable for whether the given temperature intervals are active or not.","category":"page"},{"location":"background/background/#References","page":"Heat exchanger","title":"References","text":"","category":"section"},{"location":"background/background/","page":"Heat exchanger","title":"Heat exchanger","text":"K. Kvalsvik and K. Hanne. Linear optimization of district heating systems. Description of an upgraded district heating module for eTransport (ZEN Research Centre, 2018).\n\n\n\nA. Dalla Rosa, H. Li and S. Svendsen. Method for optimal design of pipes for low-energy district heating, with focus on heat losses. Energy 36, 2407–2418 (2011).\n\n\n\nH. Kauko, D. Pinel, I. Graabak and O. Wolfgang. Assessing the potential of seasonal thermal storage for local energy systems: Case study for a neighborhood in Norway. Smart Energy 6, 100075 (2022).\n\n\n\nM. A. Duran and I. E. Grossmann. Simultaneous optimization and heat integration of chemical processes. AIChE Journal 32, 123–138 (1986).\n\n\n\nI. E. Grossmann, H. Yeomans and Z. Kravanja. A rigorous disjunctive optimization model for simultaneous flowsheet optimization and heat integration. Computers & chemical engineering 22, S157–S164 (1998).\n\n\n\nN. Quirante, J. A. Caballero and I. E. Grossmann. A novel disjunctive model for the simultaneous optimization and heat integration. Computers & Chemical Engineering 96, 149–168 (2017).\n\n\n\nN. Quirante, I. E. Grossmann and J. A. Caballero. Disjunctive model for the simultaneous optimization and heat integration with unclassified streams and area estimation. Computers & Chemical Engineering 108, 217–231 (2018).\n\n\n\nC. J. Nielsen and P. I. Barton. A Generalized, Nonsmooth Operator for Process Integration. In: Computer Aided Chemical Engineering, Vol. 46 (Elsevier, 2019); pp. 385–390.\n\n\n\nS. A. Papoulias and I. E. Grossmann. A structural optimization approach in process synthesis—II: Heat recovery networks. Computers & Chemical Engineering 7, 707–721 (1983).\n\n\n\n","category":"page"},{"location":"background/background/","page":"Heat exchanger","title":"Heat exchanger","text":"","category":"page"},{"location":"manual/NEWS/#Release-Notes","page":"Release notes","title":"Release Notes","text":"","category":"section"},{"location":"manual/NEWS/#Unversioned","page":"Release notes","title":"Unversioned","text":"","category":"section"},{"location":"manual/NEWS/#New-subtype-for-thermal-energy-storage","page":"Release notes","title":"New subtype for thermal energy storage","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Added Abstract type AbstractTES.\nIntroduced a new AbstractTES type BoundRateTES including documentation, checks, and tests which sets a maximum bound for charge and discharge capacities in relation to the installed storage level.\nAdded discharge capacity to ThermalEnergyStorage node with legacy constructors to prevent breaking changes.","category":"page"},{"location":"manual/NEWS/#Miscellaneous","page":"Release notes","title":"Miscellaneous","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Switched from Data to ExtensionData as described within EnergyModelsBase v0.9.1.\nRemoved examples from test set as it somehow creates an error in the latest version on Ubuntu. This error is only present for a single test setup and cannot be reproduced locally.\nRemoved the folder submodels as the CHP model was moved to a new repository.","category":"page"},{"location":"manual/NEWS/#Fixes","page":"Release notes","title":"Fixes","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Minor fixes to the documentation and example comments.\nFixed one of the constructors for ThermalEnergyStorage which was not working. This includes as well now a warning if the wrong StorageBehavior is utilized.","category":"page"},{"location":"manual/NEWS/#Version-0.1.2-(2025-06-10)","page":"Release notes","title":"Version 0.1.2 (2025-06-10)","text":"","category":"section"},{"location":"manual/NEWS/#Bugfix","page":"Release notes","title":"Bugfix","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"The function t_source(n::HeatPump) did result in an error. This was not tested previously and not used in the model. New tests are hence included for it.","category":"page"},{"location":"manual/NEWS/#Version-0.1.1-(2025-02-10)","page":"Release notes","title":"Version 0.1.1 (2025-02-10)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjusted to EnergyModelsBase v0.9.0:\nIncreased version nubmer for EMB.\nModel worked without adjustments.\nAdjustments only required for simple understanding of changes.\nIncluded updated DHPipe:\nDHPIpe now follow a check.\nThe arguments for create_link were updated.\nRenaming of test files to be consistent with other packages.","category":"page"},{"location":"manual/NEWS/#Version-0.1.0-(2024-12-18)","page":"Release notes","title":"Version 0.1.0 (2024-12-18)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Initial version of the heat package within the EnergyModelsX framework.","category":"page"},{"location":"manual/NEWS/#Heat-Pump","page":"Release notes","title":"Heat Pump","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Developed a new HeatPump node based on RefNetworkNode.\nIncorporates constraints on the input flow of a heat source and a driving force (electricity).\nThe underlying COP calculation is based on given profiles for sink and source temperature as well as a Carnot efficiency.","category":"page"},{"location":"manual/NEWS/#Thermal-Energy-Storage","page":"Release notes","title":"Thermal Energy Storage","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Developed a ThermalEnergyStorage node.\nIncludes heat losses calculated by a given heat loss factor and the storage level of the previous time period.","category":"page"},{"location":"manual/NEWS/#District-Heating-Pipe","page":"Release notes","title":"District Heating Pipe","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Developed a new type of link called DHPipe.\nIncorporates a constant absolute heat loss between the input and the output of the link based on district heating temperature, ground temperature, pipe lenght and heat loss factor.\nRequires a capacity and allows for investments.","category":"page"},{"location":"manual/NEWS/#HeatExchanger-nodes","page":"Release notes","title":"HeatExchanger nodes","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Developed a HeatExchanger node as parametric type.\nThe node can be used in combination with ResourceHeat for automatic calculation of the achievable energy recovery.","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"","category":"page"},{"location":"#EnergyModelsHeat","page":"Home","title":"EnergyModelsHeat","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"EnergyModelsHeat extends EnergyModelsX with functionality to model heat flows and district heating network with improved technical descriptions.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The following types are introduced:","category":"page"},{"location":"","page":"Home","title":"Home","text":"a Resource ResourceHeat,\na Link DHPipe,\na NetworkNode HeatPump,\na Storage ThermalEnergyStorage and BoundRateTES,\na utility type PinchData, and\na NetworkNode HeatExchanger.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The new introduced types are also documented in the public library as well as the corresponding pages.","category":"page"},{"location":"#[ResourceHeat](@ref-resources-ResourceHeat)","page":"Home","title":"ResourceHeat","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Heat as a resource does not possess a CO₂ intensity when used. Instead, it has as fields both the supply and return temperatures of heat utilized in a district heating network.","category":"page"},{"location":"#[DHPipe](@ref-links-DHPipe)","page":"Home","title":"DHPipe","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"District heating pipes are a new subtype of links. They include a capacity and a new variable for calculating the loss of the district heating network. While the loss is independent of the transported energy in the current implementation, it may be possible to provide a nonlinear formulation for the pipe in a later stage.","category":"page"},{"location":"#[HeatPump](@ref-nodes-HeatPump)","page":"Home","title":"HeatPump","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Heat pumps are utilizing a driving force for transferring heat from a lower temperature to a higher temperature. As a consequence, it requires changes to the input flow to the heat pump. The input flow is now dependent on the temperature profile of the source and sink heats.","category":"page"},{"location":"#[ThermalEnergyStorage](@ref-nodes-TES)","page":"Home","title":"ThermalEnergyStorage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Thermal energy storage differs from standard storage node as they experience a constant loss dependent on the storage volume and not the charging or discharging of the storage. This change requires direct adjustments to the storage balance that cannot be incorporated in the variable textttstor_level_Δ_op. The current implementation assumes a loss independent of the operational period. As a consequence, it is assumed that the tempreature outside of the thermal energy storage does not change in the operational periods.","category":"page"},{"location":"#[HeatExchanger](@ref-nodes-HeatExchanger)","page":"Home","title":"HeatExchanger","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A lot of process produce surplus heat as a side stream. The utilization of the heat is however limited by the fact that heat exchangers have a minimum temperature approach as design parameter to minimize the surface area. This is accounted for in the heat exchanger node utilizing the concepts of ResourceHeat.","category":"page"},{"location":"#Manual-outline","page":"Home","title":"Manual outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"manual/quick-start.md\",\n    \"manual/simple-example.md\",\n    \"manual/NEWS.md\",\n]\nDepth = 1","category":"page"},{"location":"#Description-of-the-resources","page":"Home","title":"Description of the resources","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"resources/resourceheat.md\",\n]\nDepth = 1","category":"page"},{"location":"#Description-of-the-links","page":"Home","title":"Description of the links","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"links/dhpipe.md\",\n]\nDepth = 1","category":"page"},{"location":"#Description-of-the-nodes","page":"Home","title":"Description of the nodes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"nodes/heatpump.md\",\n    \"nodes/thermalenergystorage.md\",\n    \"nodes/heatexchanger.md\",\n]\nDepth = 1","category":"page"},{"location":"#How-to-guides","page":"Home","title":"How to guides","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"howto/simple_conversion.md\",\n    \"howto/contribute.md\",\n]\nDepth = 1","category":"page"},{"location":"#Library-outline","page":"Home","title":"Library outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"library/public.md\",\n    \"library/internals/types-EMH.md\",\n    \"library/internals/methods-fields.md\",\n    \"library/internals/methods-EMH.md\",\n    \"library/internals/methods-EMB.md\",\n]\nDepth = 1","category":"page"},{"location":"#Background","page":"Home","title":"Background","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"background/background.md\",\n]\nDepth = 1","category":"page"},{"location":"#Project-Funding","page":"Home","title":"Project Funding","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The development of EnergyModelsHeat was funded by the Norwegian Research Council in the project ZEESA, project number 336342, as well as the European Union’s Horizon Europe research and innovation programme in the project iDesignRES under grant agreement 101095849.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"howto/simple_conversion/#Simple-heat-conversion","page":"Use surplus heat for DH","title":"Simple heat conversion","text":"","category":"section"},{"location":"howto/simple_conversion/","page":"Use surplus heat for DH","title":"Use surplus heat for DH","text":"See tests (emx_integration.jl) for a simple example.","category":"page"},{"location":"howto/simple_conversion/","page":"Use surplus heat for DH","title":"Use surplus heat for DH","text":"","category":"page"},{"location":"library/public/#lib-pub","page":"Public","title":"Public interface","text":"","category":"section"},{"location":"library/public/#lib-pub-module","page":"Public","title":"Module","text":"","category":"section"},{"location":"library/public/#EnergyModelsHeat","page":"Public","title":"EnergyModelsHeat","text":"Main module for EnergyModelsHeat: a framework for energy system models with thermal components.\n\nIt exports the resource ResourceHeat and structures for DH pipe, heat pump and heat exchanger.\n\n\n\n\n\n","category":"module"},{"location":"library/public/#lib-pub-res-types","page":"Public","title":"Resource types","text":"","category":"section"},{"location":"library/public/#EnergyModelsHeat.ResourceHeat","page":"Public","title":"EnergyModelsHeat.ResourceHeat","text":"ResourceHeat{IDT,TS<:TimeProfile,TR<:TimeProfile} <: Resource\n\nResourceHeat(id, t_supply::TimeProfile, t_return::TimeProfile)\nResourceHeat(id, t_supply::TimeProfile)\nResourceHeat(id, t_supply::Real, t_return::Real)\nResourceHeat(id, t_supply::Real)\n\nA resource for heat.\n\nFields\n\nid::IDT is the name/identifyer of the resource.\nt_supply::TS is the supply temperature in °C as a TimeProfile. Providing a single number will be translated to a FixedProfile.\nt_return::TR is the return temperature in °C as a TimeProfile. Providing a single number will be translated to a FixedProfile. This field is optional, and will be set to zero if no value is provided.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#lib-pub-links-types","page":"Public","title":"Link types","text":"","category":"section"},{"location":"library/public/#EnergyModelsHeat.DHPipe","page":"Public","title":"EnergyModelsHeat.DHPipe","text":"DHPipe\n\nA district heating pipe between two nodes. The district heating pipe only transports the specified resource with a specified loss factor. It has a maximum capacity.\n\nFields\n\nid is the name/identifier of the link.\nfrom::Node is the node from which there is flow into the link.\nto::Node is the node to which there is flow out of the link.\ncap::TimeProfile is the heat transport capacity of the pipe\npipe_length::Float64 is the pipe length in meters\npipe_loss_factor::Float64 is the heat loss factor in [W m⁻¹ K⁻¹].\nt_ground::TimeProfile is the ground temperature in °C.\n**resource_heat::ResourceHeat is the resource used by DHPipe\nformulation::Formulation is the used formulation of links. The field formulation is conditional through usage of a constructor.\ndata::Vector{<:ExtensionData} is the additional data (e.g., for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#lib-pub-node-types","page":"Public","title":"Node types","text":"","category":"section"},{"location":"library/public/#EnergyModelsHeat.HeatPump","page":"Public","title":"EnergyModelsHeat.HeatPump","text":"HeatPump <: EMB.NetworkNode\n\nA HeatPump node to convert low temperature heat to high(er) temperature heat by utilizing an exergy driving force (e.g., electricity).\n\nFields\n\nid is the name/identifier of the node.\ncap::TimeProfile is the installed heating capacity.\ncap_lower_bound is the lower capacity bound for flexibility within [0, 1] reflecting the lowest possible relative capacity use.\nt_source is the temperature profile of the heat source\nt_sink is the sink temperature of the condensator. The temperature must be given in °C.\neff_carnot is the Carnot Efficiency COPreal/COPcarnot. The value must be within [0, 1].\ninput_heat is the resource for the low temperature heat input.\ndriving_force is the resource of the driving force, e.g., electricity.\nopex_var::TimeProfile is the variable operating expense per energy unit produced.\nopex_fixed::TimeProfile is the fixed operating expense.\noutput::Dict{<:Resource, <:Real} are the produced Resources with conversion value Real.\ndata::Vector{<:ExtensionData} is the additional data (e.g., for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsHeat.ThermalEnergyStorage","page":"Public","title":"EnergyModelsHeat.ThermalEnergyStorage","text":"ThermalEnergyStorage{T} <: Storage{T}\n\nA ThermalEnergyStorage that functions mostly like a RefStorage with the additional option to include a discharge rate and thermal energy losses. Heat losses are quantified through a heat loss factor that describes the amount of thermal energy that is lost in relation to the storage level from the previous timeperiod.\n\nThe main difference to RefStorage is that these heat losses do not occur while charging or discharging, i.e., they are proportional to the storage level.\n\nwarning: StorageBehavior\nBoundRateTES in its current implementation only supports CyclicRepresentative as storage behavior when using RepresentativePeriods. This input is not a required input due to the inclusion of a constructor.\n\nFields\n\nid is the name/identifier of the node.\ncharge::AbstractStorageParameters are the charging parameters of the ThermalEnergyStorage node. Depending on the chosen type, the charge parameters can include variable OPEX, fixed OPEX, and/or a capacity.\nlevel::AbstractStorageParameters are the level parameters of the ThermalEnergyStorage. Depending on the chosen type, the charge parameters can include variable OPEX and/or fixed OPEX.\ndischarge::AbstractStorageParameters are the discharging parameters of the ThermalEnergyStorage node. Depending on the chosen type, the discharge parameters can include variable OPEX, fixed OPEX, and/or a capacity.\nstor_res::Resource is the stored Resource.\nheat_loss_factor::Float64 are the relative heat losses in percent.\ninput::Dict{<:Resource,<:Real} are the input Resources with conversion value Real.\noutput::Dict{<:Resource,<:Real} are the generated Resources with conversion value Real. Only relevant for linking and the stored Resource as the output value is not utilized in the calculations.\ndata::Vector{<:ExtensionData} is the additional data (e.g., for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsHeat.BoundRateTES","page":"Public","title":"EnergyModelsHeat.BoundRateTES","text":"BoundRateTES{T} <: AbstractTES{T}\n\nA BoundRateTES that has the option to include thermal energy losses. In contrast to ThermalEnergyStorage, the maximum charging and discharging rates are defined as a ratio between the (dis-)charge rate and the installed storage capacity.\n\nwarning: StorageBehavior\nBoundRateTES in its current implementation only supports CyclicRepresentative as storage behavior when using RepresentativePeriods. This input is not a required input due to the inclusion of a constructor.\n\nFields\n\nid is the name/identifier of the node.\nlevel::AbstractStorageParameters are the level parameters of the BoundRateTES. Depending on the chosen type, the level parameters can include variable OPEX and/or fixed OPEX.\nstor_res::Resource is the stored Resource.\nheat_loss_factor::Float64 are the relative heat losses in percent.\nlevel_discharge::Float64 is the ratio of maximum discharge rate and installed storage level.\nlevel_charge::Float64 is the ratio of maximum charge rate and installed storage level.\ninput::Dict{<:Resource,<:Real} are the input Resources with conversion value Real.\noutput::Dict{<:Resource,<:Real} are the generated Resources with conversion value Real. Only relevant for linking and the stored Resource as the output value is not utilized in the calculations.\ndata::Vector{<:ExtensionData} is the additional data (e.g., for investments). The field data is conditional through usage of a constructor.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsHeat.HeatExchanger","page":"Public","title":"EnergyModelsHeat.HeatExchanger","text":"HeatExchanger\n\nA HeatExchanger node to convert \"raw\" surplus energy from other processes to \"available\" energy that can be used in the District Heating network.\n\nThe default heat exchanger assumes that mass flows can be different to optimize heat transfer. This is encoded by the type parameter HeatExchangerAssumptions. The default value is DifferentMassFlows, the alternative is to specify EqualMassFlows to limit heat exchange to equal mass flow in the two circuits.\n\nFields\n\nid is the name/identifier of the node.\ncap::TimeProfile is the installed capacity.\nopex_var::TimeProfile is the variable operating expense per energy unit produced.\nopex_fixed::TimeProfile is the fixed operating expense.\ninput::Dict{<:Resource, <:Real} are the input Resources with conversion value Real.\noutput::Dict{<:Resource, <:Real} are the generated Resources with conversion value Real.\ndata::Vector{<:ExtensionData} is the additional data (e.g. for investments). The field data is conditional through usage of a constructor.\ndelta_t_min is the ΔT_min for the heat exchanger\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsHeat.DirectHeatUpgrade","page":"Public","title":"EnergyModelsHeat.DirectHeatUpgrade","text":"DirectHeatUpgrade\n\nA DirectHeatUpgrade node to upgrade \"raw\" surplus energy from other processes to \"available\" energy that can be used in the District Heating network.\n\nThe default DirectHeatUpgrade heat exchanger assumes that mass flows can be different to optimize heat transfer. This is encoded by the type parameter HeatExchangerAssumptions. The default value is DifferentMassFlows, the alternative is to specify EqualMassFlows to limit heat exchange to equal mass flow in the two circuits.\n\nFields\n\nid is the name/identifier of the node.\ncap::TimeProfile is the installed capacity.\nopex_var::TimeProfile is the variable operating expense per energy unit produced.\nopex_fixed::TimeProfile is the fixed operating expense.\ninput::Dict{<:Resource, <:Real} are the input Resources with conversion value Real. Valid inputs are: one Heat resource and one power resource.\noutput::Dict{<:Resource, <:Real} are the generated Resources with conversion value Real. Valid output is a single Heat resource\ndata::Vector{<:ExtensionData} is the additional data. The pinch data must be included here.\ndelta_t_min is the ΔT_min for the heat exchanger.\n\n\n\n\n\n","category":"type"},{"location":"library/public/","page":"Public","title":"Public","text":"todo: Changes\nOnce exported, remove EnergyModelsHeat. in front of DirectHeatUpgrade","category":"page"},{"location":"library/public/#lib-pub-data-types","page":"Public","title":"Data types","text":"","category":"section"},{"location":"library/public/#EnergyModelsHeat.PinchData","page":"Public","title":"EnergyModelsHeat.PinchData","text":"PinchData{T}\n\nData for fixed temperature intervals used to calculate available energy from surplus energy source operating at T_SH_hot and T_SH_cold, with ΔT_min between surplus source and the district heating network operating at T_DH_hot and T_DH_cold.\n\nThis struct is used internally, and it is calculated from the supply and return temperatures of the ResourceHeat going in and out of the AbstractHeatExchanger.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#lib-pub-aux-types","page":"Public","title":"Auxiliary types","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"todo: Changes\nTo be added, once docstrings are written:EqualMassFlows\nDifferentMassFlows","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"","category":"page"}]
}
